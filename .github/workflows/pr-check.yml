name: Merge Check

on:
  pull_request:
    branches-ignore:
      - bitbucket
      - cherry-pick-*

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # following job is only used for branch pushes from renovate workflow
  install:
    if: startsWith(github.head_ref || github.ref_name, 'renovate/') && github.actor == 'renovate[bot]'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}
      TURBO_TELEMETRY_DISABLED: 1
      YARN_ENABLE_HARDENED_MODE: 0
    steps:
      - name: Check out code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Set Yarn global folder
        env:
          YARN_GLOBAL_FOLDER: ${{ runner.temp }}/.yarn/berry
        run: echo "YARN_GLOBAL_FOLDER=$YARN_GLOBAL_FOLDER" >> .env
      - name: Setup Node.js environment
        uses: actions/setup-node@1d0ff469b7ec7b3cb9d8673fde0c81c44821de2a # v4
        with:
          node-version: lts/Hydrogen
          cache: yarn
          cache-dependency-path: '**/yarn.lock'
      - name: Start Turbo Cache Server
        uses: rharkor/caching-for-turbo@c3de885e542eec7eb01eb1a6a59e97c7a2448615 # v1.6
        with:
          cache-prefix: ${{ vars.TURBO_CACHE_PREFIX }}
      - name: Install dependencies
        run: |
          yarn install
          yarn bootstrap
      - name: Trigger post upgrade
        if: failure()
        uses: benc-uk/workflow-dispatch@e2e5e9a103e331dad343f381a29e654aea3cf8fc # v1
        with:
          workflow: post-upgrade-task.yml
          inputs: '{ "ref": "${{ github.head_ref || github.ref }}" }'
          ref: ${{ github.head_ref }}

  ci:
    uses: ./.github/workflows/ci.yml
    with:
      ref: ${{ github.event.pull_request.head.ref }}
      base_ref: ${{ github.base_ref }}
    secrets: inherit

  finish:
    needs: ci
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: 'Check status of all required jobs'
        run: |-
          NEEDS_CONTEXT='${{ toJson(needs) }}'
          JOB_IDS=$(echo "$NEEDS_CONTEXT" | jq -r 'keys[]')
          for JOB_ID in $JOB_IDS; do
            RESULT=$(echo "$NEEDS_CONTEXT" | jq -r ".[\"$JOB_ID\"].result")
            echo "$JOB_ID job result: $RESULT"
            if [[ "$RESULT" != "success" ]]; then
              echo "***"
              echo "Error: The $JOB_ID job did not pass."
              exit 1
            fi
          done
          echo "All jobs passed or were skipped."
