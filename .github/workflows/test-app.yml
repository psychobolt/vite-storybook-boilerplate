on:
  workflow_call:
    inputs:
      ref_name:
        type: string
      workspace:
        required: true
        type: string
      path:
        required: true
        type: string

jobs:
  test:
    name: Run Tests
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    environment: ${{ inputs.workspace }}
    env:
      REF_NAME: ${{ inputs.ref_name || github.ref_name }}
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}
      TURBO_VERBOSITY: ${{ vars.TURBO_VERBOSITY || 0 }}
      TURBO_ENV_MODE: ${{ vars.TURBO_ENV_MODE || 'strict' }}
      TURBO_TELEMETRY_DISABLED: 1
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      YARN_ENABLE_HARDENED_MODE: 0
    steps:
      - name: Check out code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4
        with:
          ref: ${{ inputs.ref_name || github.ref }}
          fetch-depth: 2
      - name: Set Yarn global folder
        if: matrix.os == 'windows-latest'
        run: yarn config set globalFolder .temp/.yarn/berry
      - name: Setup Node.js environment
        if: matrix.os == 'ubuntu-latest'
        uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4
        with:
          node-version: lts/*
          cache: yarn
          cache-dependency-path: '**/yarn.lock'
      - name: Setup Node.js environment (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4
        with:
          node-version: lts/*
          cache: yarn
          cache-dependency-path: |
            **/yarn.lock
            yarnrc.yml
      - name: Start Turbo Cache Server
        uses: rharkor/caching-for-turbo@d030e8813d3de6746943c17def1f5643b1dd1e94 # v1.1
        with:
          cache-prefix: ${{ vars.TURBO_CACHE_PREFIX }}
      - name: Install dependencies
        run: |
          yarn install
          yarn bootstrap
      - name: Run Lint
        run: yarn workspace ${{ inputs.workspace }} turbo run lint --env-mode=${{ env.TURBO_ENV_MODE }} --verbosity=${{ env.TURBO_VERBOSITY }}
      - name: Install Vercel Tools
        run: npm install -g vercel turbo-ignore
      - name: Fetch base branch
        if: github.event_name == 'pull_request'
        run: git fetch --depth=1 origin ${{ github.base_ref }}:${{ github.base_ref }}
      - name: Run turbo-ignore
        id: deploy
        if: matrix.os == 'ubuntu-latest'
        run: |
          set +e
          yarn workspace ${{ inputs.workspace }} exec turbo-ignore --fallback=${{ github.base_ref || 'HEAD~1' }}
          exit_code=$?
          set -e
          if [ $exit_code -eq 0 ]; then 
            echo "ignore=true" >> $GITHUB_OUTPUT
          else
            echo "ignore=false" >> $GITHUB_OUTPUT
          fi
      - name: Run Build
        if: matrix.os == 'windows-latest' || steps.deploy.outputs.ignore == 'true'
        run: yarn workspace ${{ inputs.workspace }} turbo run build --env-mode=${{ env.TURBO_ENV_MODE }} --verbosity=${{ env.TURBO_VERBOSITY }}
      - name: Build with Vercel
        if: matrix.os == 'ubuntu-latest' && steps.deploy.outputs.ignore == 'false'
        run: |
          vercel pull --environment=${{ env.REF_NAME == 'main' && 'production' || 'preview' }} --yes --token ${{ secrets.VERCEL_TOKEN }}
          vercel build ${{ env.REF_NAME == 'main' && '--prod' || '' }} --token ${{ secrets.VERCEL_TOKEN }}
      - name: Deploy to Vercel
        if: matrix.os == 'ubuntu-latest' && steps.deploy.outputs.ignore == 'false'
        uses: BetaHuhn/deploy-to-vercel-action@9893d875c782e1b4995a9399e8c4d660c33849c3 # v1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_DEPLOYMENT_ENV: ${{ format('{0} ({1})', inputs.workspace, env.REF_NAME == 'main' && 'Production' || 'Preview') }}
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID}}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          PRODUCTION: ${{ env.REF_NAME == 'main' }}
          FORCE: true
          PREBUILT: true
