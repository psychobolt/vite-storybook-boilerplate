diff --git a/esm/esm.mjs b/esm/esm.mjs
index 8453ae2480391c8eb5cc18d5460bd55b723592ce..f7642ab8b18bb272607b0f7cf4f6cc9fea8c0aa1 100644
--- a/esm/esm.mjs
+++ b/esm/esm.mjs
@@ -13,7 +13,8 @@ const host = {
 };
 const EXTENSIONS = [ts.Extension.Ts, ts.Extension.Tsx, ts.Extension.Mts];
 export const resolve = async (specifier, context, nextResolve) => {
-    const isTS = EXTENSIONS.some((ext) => specifier.endsWith(ext));
+    const modulePath = specifier.startsWith('file://') ? fileURLToPath(specifier) : specifier;
+    const isTS = EXTENSIONS.some((ext) => modulePath.endsWith(ext));
     // entrypoint
     if (!context.parentURL) {
         return {
@@ -26,7 +27,7 @@ export const resolve = async (specifier, context, nextResolve) => {
     if (context.parentURL.includes('/node_modules/') && !isTS) {
         return nextResolve(specifier);
     }
-    const { resolvedModule } = ts.resolveModuleName(specifier, fileURLToPath(context.parentURL), tsconfig, host, moduleResolutionCache);
+    const { resolvedModule } = ts.resolveModuleName(modulePath, fileURLToPath(context.parentURL), tsconfig, host, moduleResolutionCache);
     // import from local project to local project TS file
     if (resolvedModule &&
         !resolvedModule.resolvedFileName.includes('/node_modules/') &&
@@ -47,7 +48,7 @@ export const load = async (url, context, nextLoad) => {
     if (context.format === 'ts') {
         const { source } = await nextLoad(url, context);
         const code = typeof source === 'string' ? source : Buffer.from(source).toString();
-        const compiled = await compile(code, url, tsconfig, true);
+        const compiled = await compile(code, fileURLToPath(url), tsconfig, true);
         return {
             format: 'module',
             source: compiled,
