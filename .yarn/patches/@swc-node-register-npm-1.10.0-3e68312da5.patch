diff --git a/esm/esm.mjs b/esm/esm.mjs
index 1e7429abec21338477f904b17a35161b75d01e19..faa28e6f6f3b1f13ef2dedff5f695557e65613c0 100644
--- a/esm/esm.mjs
+++ b/esm/esm.mjs
@@ -175,15 +175,20 @@ export const load = async (url, context, nextLoad) => {
         debug('loaded: internal format', url);
         return nextLoad(url, context);
     }
+    // workaround for a vscode extension, fallback. See https://github.com/microsoft/vscode/issues/130367
+    if (url.indexOf('.vscode/extensions') > 0) {
+        return nextLoad(url, context);
+    }
     const { source, format: resolvedFormat } = await nextLoad(url, context);
     debug('loaded', url, resolvedFormat);
     const code = !source || typeof source === 'string' ? source : Buffer.from(source).toString();
-    const compiled = await compile(code, url, tsconfigForSWCNode, true);
+    const compiled = await compile(code, url.startsWith('file:') ? fileURLToPath(url) : url, tsconfigForSWCNode, true);
     debug('compiled', url, resolvedFormat);
     return addShortCircuitSignal({
         // for lazy: ts-node think format would undefined, actually it should not, keep it as original temporarily
         format: resolvedFormat,
         source: compiled,
+        responseURL: new URL(url).href
     });
 };
 //# sourceMappingURL=esm.mjs.map
\ No newline at end of file
diff --git a/lib/register.js b/lib/register.js
index d4ecace8dc5aa7c31f3f150f4a0f2c314ceb337c..75640201af40bf8c605136bd9fb1221fa31840ae 100644
--- a/lib/register.js
+++ b/lib/register.js
@@ -53,7 +53,7 @@ const injectInlineSourceMap = ({ filename, code, map, }) => {
     return code;
 };
 function compile(sourcecode, filename, options, async = false) {
-    if ((filename.includes('node_modules') && !exports.AVAILABLE_TS_EXTENSION_PATTERN.test(filename)) ||
+    if (typeof sourcecode === 'undefined' || (filename.includes('node_modules') && !exports.AVAILABLE_TS_EXTENSION_PATTERN.test(filename)) ||
         !exports.AVAILABLE_EXTENSION_PATTERN.test(filename)) {
         return sourcecode;
     }
