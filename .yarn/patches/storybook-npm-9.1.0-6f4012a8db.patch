diff --git a/bin/index.cjs b/bin/index.cjs
index d0395f4f3f9e415065d539f1dc7cf14f1eb2c824..ce13973e4eb9c3858483445373249c20f2a7261d 100755
--- a/bin/index.cjs
+++ b/bin/index.cjs
@@ -1,8 +1,8 @@
 #!/usr/bin/env node
 
 const majorNodeVersion = parseInt(process.versions.node, 10);
-if (majorNodeVersion < 20) {
-  console.error('To run Storybook you need to have Node.js 20 or higher');
+if (majorNodeVersion < 18) {
+  console.error('To run Storybook you need to have Node.js 18 or higher');
   process.exit(1);
 }
 
diff --git a/dist/builder-manager/index.cjs b/dist/builder-manager/index.cjs
index f94aa98013f05e312c987f234f3a03bd0596ddde..146e075ff30cbfe33abee0eb94703d3ac3d26e97 100644
--- a/dist/builder-manager/index.cjs
+++ b/dist/builder-manager/index.cjs
@@ -2009,7 +2009,7 @@ var Xi = /^\/($|\?)/, D, I, ye = /* @__PURE__ */ o(async (e) => {
     jsxImportSource: "react",
     tsconfig: r,
     legalComments: "external",
-    plugins: [se(Jt.globalsModuleInfoMap), (0, Ut.pnpPlugin)()],
+    plugins: [se(Jt.globalsModuleInfoMap), require('node-stdlib-browser/helpers/esbuild/plugin')(require('node-stdlib-browser')), (0, Ut.pnpPlugin)()],
     banner: {
       js: "try{"
     },
@@ -2017,9 +2017,11 @@ var Xi = /^\/($|\?)/, D, I, ye = /* @__PURE__ */ o(async (e) => {
       js: '}catch(e){ console.error("[Storybook] One of your manager-entries failed: " + import.meta.url, e); }'
     },
     define: {
+      process: "process",
       "process.env": JSON.stringify(a),
       ...(0, Ht.stringifyProcessEnvs)(a),
       global: "window",
+      Buffer: "Buffer",
       module: "{}"
     }
   };
diff --git a/dist/builder-manager/index.js b/dist/builder-manager/index.js
index ef1a9529887d63a28e3b8036229fb678d745b6ef..20d4de3e35c8e04a215c5c8adbeab14607c32bca 100644
--- a/dist/builder-manager/index.js
+++ b/dist/builder-manager/index.js
@@ -2022,7 +2022,7 @@ var mr = /^\/($|\?)/, L, A, _t = /* @__PURE__ */ o(async (e) => {
     jsxImportSource: "react",
     tsconfig: r,
     legalComments: "external",
-    plugins: [Z(pr), (0, At.pnpPlugin)()],
+    plugins: [Z(pr), require('node-stdlib-browser/helpers/esbuild/plugin')(require('node-stdlib-browser')), (0, At.pnpPlugin)()],
     banner: {
       js: "try{"
     },
@@ -2030,9 +2030,11 @@ var mr = /^\/($|\?)/, L, A, _t = /* @__PURE__ */ o(async (e) => {
       js: '}catch(e){ console.error("[Storybook] One of your manager-entries failed: " + import.meta.url, e); }'
     },
     define: {
+      process: "process",
       "process.env": JSON.stringify(a),
       ...cr(a),
       global: "window",
+      Buffer: "Buffer",
       module: "{}"
     }
   };
diff --git a/dist/common/index.cjs b/dist/common/index.cjs
index 1a902b0905e3468a3268977659e8a6b61ae73faa..6b27231bd89ba21d5117389e17b93230e099fc5a 100644
--- a/dist/common/index.cjs
+++ b/dist/common/index.cjs
@@ -18738,14 +18738,14 @@ s(la, "getInterpretedFileWithExt");
 
 // src/common/utils/interpret-require.ts
 var SE = !1;
-function sn(t) {
+async function sn(t) {
   let A = !!require("module")._extensions[".ts"];
   if (SE === !1 && !A) {
     let { register: i } = require("esbuild-register/dist/node");
     SE = !0, i({
       target: `node${process.version.slice(1)}`,
       format: "cjs",
-      hookIgnoreNodeModules: !0,
+      hookIgnoreNodeModules: !1,
       // Some frameworks, like Stylus, rely on the 'name' property of classes or functions
       // https://github.com/storybookjs/storybook/issues/19049
       keepNames: !0,
@@ -18757,7 +18757,9 @@ function sn(t) {
     }`
     });
   }
-  let e = require(t);
+  const { isAbsolute } = require('node:path');
+  const { pathToFileURL } = require('node:url');
+  let e = await import(isAbsolute(t) ? pathToFileURL(t).href : t);
   return typeof e == "object" && e !== null && typeof e.default < "u" ? e.default : e;
 }
 s(sn, "interopRequireDefault");
@@ -23382,10 +23384,10 @@ async function ts(t, A) {
 s(ts, "validateConfigurationFiles");
 
 // src/common/utils/load-custom-presets.ts
-function La({ configDir: t }) {
+async function La({ configDir: t }) {
   ts(t);
-  let A = Pr((0, Kn.resolve)(t, "presets"));
-  if (Pr((0, Kn.resolve)(t, "main"))) {
+  let A = await Pr((0, Kn.resolve)(t, "presets"));
+  if (await Pr((0, Kn.resolve)(t, "main"))) {
     let r = Ur((0, Kn.resolve)(t, "main"));
     if (r)
       return [r];
@@ -23628,7 +23630,7 @@ s(Gu, "getPresets");
 async function sN(t) {
   let { corePresets: A = [], overridePresets: e = [], ...r } = t, i = [
     ...A,
-    ...La(t),
+    ...await La(t),
     ...e
   ], n = Yu(i);
   return n.length < i.length && $r.logger.warn(
diff --git a/dist/common/index.js b/dist/common/index.js
index 6e2dbd69d006f86246e450ef74a27e02b1644c32..7e33ad366b71af8d7a9a6a32d3a063c88d8aa16d 100644
--- a/dist/common/index.js
+++ b/dist/common/index.js
@@ -18669,14 +18669,14 @@ s(Bl, "getInterpretedFileWithExt");
 
 // src/common/utils/interpret-require.ts
 var Ql = !1;
-function dg(t) {
+async function dg(t) {
   let A = !!v("module")._extensions[".ts"];
   if (Ql === !1 && !A) {
     let { register: i } = v("esbuild-register/dist/node");
     Ql = !0, i({
       target: `node${process.version.slice(1)}`,
       format: "cjs",
-      hookIgnoreNodeModules: !0,
+      hookIgnoreNodeModules: !1,
       // Some frameworks, like Stylus, rely on the 'name' property of classes or functions
       // https://github.com/storybookjs/storybook/issues/19049
       keepNames: !0,
@@ -18688,7 +18688,9 @@ function dg(t) {
     }`
     });
   }
-  let e = v(t);
+  const { isAbsolute } = require('node:path');
+  const { pathToFileURL } = require('node:url');
+  let e = await import(isAbsolute(t) ? pathToFileURL(t).href : t);
   return typeof e == "object" && e !== null && typeof e.default < "u" ? e.default : e;
 }
 s(dg, "interopRequireDefault");
@@ -23321,10 +23323,10 @@ async function zs(t, A) {
 s(zs, "validateConfigurationFiles");
 
 // src/common/utils/load-custom-presets.ts
-function BE({ configDir: t }) {
+async function BE({ configDir: t }) {
   zs(t);
-  let A = hi(Gg(t, "presets"));
-  if (hi(Gg(t, "main"))) {
+  let A = await hi(Gg(t, "presets"));
+  if (await hi(Gg(t, "main"))) {
     let r = li(Gg(t, "main"));
     if (r)
       return [r];
@@ -23567,7 +23569,7 @@ s(qk, "getPresets");
 async function _1(t) {
   let { corePresets: A = [], overridePresets: e = [], ...r } = t, i = [
     ...A,
-    ...BE(t),
+    ...await BE(t),
     ...e
   ], n = Jk(i);
   return n.length < i.length && Ni.warn(
diff --git a/dist/core-server/index.cjs b/dist/core-server/index.cjs
index d2dfb3ebbe63b314da6cf34b7e12482b061725e0..e627c0bf74b20f214d159f3c204d1c6a1b78f5b8 100644
--- a/dist/core-server/index.cjs
+++ b/dist/core-server/index.cjs
@@ -35805,7 +35805,7 @@ async function ld(e) {
   await (0, T2.rm)(e.outputDir, { recursive: !0, force: !0 }).catch(() => {
   }), await (0, Ru.mkdir)(e.outputDir, { recursive: !0 });
   let t = await (0, vr.loadMainConfig)(e), { framework: r } = t, i = [], n = typeof r == "string" ? r : r?.name;
-  n ? i.push((0, or.join)(n, "preset")) : e.ignorePreview || oi.logger.warn(`you have not specified a framework in your ${e.configDir}/main.\
+  n ? i.push(require.resolve((0, or.join)(n, "preset"))) : e.ignorePreview || oi.logger.warn(`you have not specified a framework in your ${e.configDir}/main.\
 js`), oi.logger.info("=> Loading presets");
   let o = await (0, vr.loadAllPresets)({
     corePresets: [
@@ -37987,7 +37987,7 @@ async function jg(e) {
   e.smokeTest && (p = c), e.port = a, e.versionCheck = u, e.configType = "DEVELOPMENT", e.configDir = o, e.cacheKey = l, e.outputDir = p, e.
   serverChannelUrl = D_(a, e);
   let h = await (0, it.loadMainConfig)(e), { framework: f } = h, d = [], m = typeof f == "string" ? f : f?.name;
-  e.ignorePreview || (0, it.validateFrameworkName)(m), m && d.push((0, Ui.join)(m, "preset")), m = m || "custom";
+  e.ignorePreview || (0, it.validateFrameworkName)(m), m && d.push(require.resolve((0, Ui.join)(m, "preset"))), m = m || "custom";
   let g = it.JsPackageManagerFactory.getPackageManager({
     configDir: e.configDir
   });
@@ -38092,7 +38092,7 @@ async function Tl(e) {
   let t = (0, Cs.resolve)(e.configDir), r = (0, PT.oneWayHash)((0, Cs.relative)((0, Fr.getProjectRoot)(), t));
   e.configType = "DEVELOPMENT", e.configDir = t, e.cacheKey = r;
   let i = await (0, Fr.loadMainConfig)(e), { framework: n } = i, o = [], a = typeof n == "string" ? n : n?.name;
-  e.ignorePreview || (0, Fr.validateFrameworkName)(a), a && o.push((0, Cs.join)(a, "preset")), a = a || "custom";
+  e.ignorePreview || (0, Fr.validateFrameworkName)(a), a && o.push(require.resolve((0, Cs.join)(a, "preset"))), a = a || "custom";
   let u = await (0, Fr.loadAllPresets)({
     corePresets: o,
     overridePresets: [
diff --git a/dist/core-server/index.js b/dist/core-server/index.js
index 73d91be2d97e7aa2f4ab94aba193fc6756134112..1c36932f5572db3037e2a9d8ea20537765b2dd5d 100644
--- a/dist/core-server/index.js
+++ b/dist/core-server/index.js
@@ -35826,7 +35826,7 @@ async function jC(e) {
   await Bj(e.outputDir, { recursive: !0, force: !0 }).catch(() => {
   }), await Tj(e.outputDir, { recursive: !0 });
   let t = await Oj(e), { framework: r } = t, i = [], n = typeof r == "string" ? r : r?.name;
-  n ? i.push(lu(n, "preset")) : e.ignorePreview || vi.warn(`you have not specified a framework in your ${e.configDir}/main.js`), vi.info("=>\
+  n ? i.push(require.resolve(lu(n, "preset"))) : e.ignorePreview || vi.warn(`you have not specified a framework in your ${e.configDir}/main.js`), vi.info("=>\
  Loading presets");
   let o = await NC({
     corePresets: [
@@ -38046,7 +38046,7 @@ async function Ak(e) {
   e.smokeTest && (p = c), e.port = a, e.versionCheck = u, e.configType = "DEVELOPMENT", e.configDir = o, e.cacheKey = l, e.outputDir = p, e.
   serverChannelUrl = d3(a, e);
   let h = await bX(e), { framework: f } = h, d = [], m = typeof f == "string" ? f : f?.name;
-  e.ignorePreview || AX(m), m && d.push(gX(m, "preset")), m = m || "custom";
+  e.ignorePreview || AX(m), m && d.push(require.resolve(gX(m, "preset"))), m = m || "custom";
   let g = yX.getPackageManager({
     configDir: e.configDir
   });
@@ -38162,7 +38162,7 @@ async function ig(e) {
   let t = OX(e.configDir), r = jX(PX(RX(), t));
   e.configType = "DEVELOPMENT", e.configDir = t, e.cacheKey = r;
   let i = await NX(e), { framework: n } = i, o = [], a = typeof n == "string" ? n : n?.name;
-  e.ignorePreview || MX(a), a && o.push(IX(a, "preset")), a = a || "custom";
+  e.ignorePreview || MX(a), a && o.push(require.resolve(IX(a, "preset"))), a = a || "custom";
   let u = await Sk({
     corePresets: o,
     overridePresets: [
