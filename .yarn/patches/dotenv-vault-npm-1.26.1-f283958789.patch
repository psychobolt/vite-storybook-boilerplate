diff --git a/dist/services/build-service.js b/dist/services/build-service.js
index 4259c9b76893ae255a339a13d52f90fcfec222f0..d439507f1a566bc9c6efe008305c113e3f9b8929 100644
--- a/dist/services/build-service.js
+++ b/dist/services/build-service.js
@@ -35,7 +35,7 @@ class BuildService {
             await this.login.login(false);
         }
         const buildMsg = 'Securely building .env.vault';
-        core_1.CliUx.ux.action.start(`${chalk_1.default.dim(this.log.pretextRemote)}${buildMsg}`);
+        core_1.ux.action.start(`${chalk_1.default.dim(this.log.pretextRemote)}${buildMsg}`);
         await this.build();
     }
     async build() {
@@ -52,7 +52,7 @@ class BuildService {
             const resp = await (0, axios_1.default)(options);
             const envName = resp.data.data.envName;
             const newData = resp.data.data.dotenv;
-            core_1.CliUx.ux.action.stop();
+            core_1.ux.action.stop();
             // write to .env.vault
             (0, fs_1.writeFileSync)(envName, newData);
             this.log.remote('Securely built .env.vault');
@@ -65,7 +65,7 @@ class BuildService {
             this.log.plain(`(run ${chalk_1.default.bold(`${vars_1.vars.cli} keys`)} to view DOTENV_KEYs)`);
         }
         catch (error) {
-            core_1.CliUx.ux.action.stop('aborting');
+            core_1.ux.action.stop('aborting');
             let errorMessage = null;
             let errorCode = 'BUILD_ERROR';
             let suggestions = [];
diff --git a/dist/services/keys-service.js b/dist/services/keys-service.js
index 281135cf0f09fac2579d01c6e5085c41a9d98e32..3e77650ad1c821de87673e37f6b3dd973774b54c 100644
--- a/dist/services/keys-service.js
+++ b/dist/services/keys-service.js
@@ -35,7 +35,7 @@ class KeysService {
             await this.login.login(false);
         }
         const keysMsg = 'Listing .env.vault decryption keys';
-        core_1.CliUx.ux.action.start(`${chalk_1.default.dim(this.log.pretextRemote)}${keysMsg}`);
+        core_1.ux.action.start(`${chalk_1.default.dim(this.log.pretextRemote)}${keysMsg}`);
         await this.keys();
     }
     async keys() {
@@ -52,14 +52,14 @@ class KeysService {
         try {
             const resp = await (0, axios_1.default)(options);
             const keys = resp.data.data.keys;
-            core_1.CliUx.ux.action.stop();
+            core_1.ux.action.stop();
             if (this.environment && keys[0]) {
                 // if environment was passed and key exists then no truncation
                 this.log.plain(keys[0].key);
             }
             else {
                 // note that table truncates on smaller terminal windows
-                core_1.CliUx.ux.table(keys, {
+                core_1.ux.table(keys, {
                     environment: {
                         header: 'environment',
                     },
@@ -72,7 +72,7 @@ class KeysService {
             }
         }
         catch (error) {
-            core_1.CliUx.ux.action.stop('aborting');
+            core_1.ux.action.stop('aborting');
             let errorMessage = null;
             let errorCode = 'KEYS_ERROR';
             let suggestions = [];
diff --git a/dist/services/local/build-service.js b/dist/services/local/build-service.js
index e63cc35051297c9e686ac5b060d8f1462271e5d3..8e438da287ec1941ea603f7e280b814c649c0e32 100644
--- a/dist/services/local/build-service.js
+++ b/dist/services/local/build-service.js
@@ -19,13 +19,13 @@ class LocalBuildService {
         this.log.deprecated();
         new append_to_ignore_service_1.AppendToIgnoreService().run();
         const buildMsg = 'Building .env.vault from files on your machine';
-        core_1.CliUx.ux.action.start(`${chalk_1.default.dim(this.log.pretextLocal)}${buildMsg}`);
+        core_1.ux.action.start(`${chalk_1.default.dim(this.log.pretextLocal)}${buildMsg}`);
         await this.build();
     }
     async build() {
         (0, fs_1.writeFileSync)(this.keysName, this.keysData);
         (0, fs_1.writeFileSync)(this.vaultName, this.vaultData);
-        core_1.CliUx.ux.action.stop();
+        core_1.ux.action.stop();
         this.log.local(`Built ${this.vaultName}`);
         this.log.plain('');
         this.log.plain('Next:');
@@ -34,7 +34,7 @@ class LocalBuildService {
         this.log.plain('3. Deploy your code');
         this.log.plain('');
         this.log.plain(`(Find your DOTENV_KEY in the ${chalk_1.default.bold(this.keysName)} file)`);
-        core_1.CliUx.ux.action.stop();
+        core_1.ux.action.stop();
     }
     get vaultData() {
         let s = `${vars_1.vars.vaultFileHeaderComment}\n\n`;
diff --git a/dist/services/local/keys-service.js b/dist/services/local/keys-service.js
index 65e90019192425fb9103f5dc4ef91d035b351811..a934525035f828be5663c6cac8d9de3fe0911651 100644
--- a/dist/services/local/keys-service.js
+++ b/dist/services/local/keys-service.js
@@ -25,12 +25,12 @@ class LocalKeysService {
             this.abort.emptyEnvKeys();
         }
         const keysMsg = 'Listing .env.vault decryption keys from .env.keys';
-        core_1.CliUx.ux.action.start(`${chalk_1.default.dim(this.log.pretextLocal)}${keysMsg}`);
+        core_1.ux.action.start(`${chalk_1.default.dim(this.log.pretextLocal)}${keysMsg}`);
         await this.keys();
     }
     async keys() {
         const keys = this.keyRows;
-        core_1.CliUx.ux.action.stop();
+        core_1.ux.action.stop();
         if (this.environment) {
             const environment = this.environment.toLowerCase();
             const result = keys.find(function (row) {
@@ -40,7 +40,7 @@ class LocalKeysService {
         }
         else {
             // note that table truncates on smaller terminal windows
-            core_1.CliUx.ux.table(keys, {
+            core_1.ux.table(keys, {
                 environment: {
                     header: 'environment',
                 },
diff --git a/dist/services/login-service.js b/dist/services/login-service.js
index 5fb2b1e2824d95d012b6a1e799d3627985fb66ee..c4f6661f92297f55f28415cf2280e06fe09a2197 100644
--- a/dist/services/login-service.js
+++ b/dist/services/login-service.js
@@ -5,6 +5,7 @@ const tslib_1 = require("tslib");
 const crypto = tslib_1.__importStar(require("crypto"));
 const chalk_1 = tslib_1.__importDefault(require("chalk"));
 const axios_1 = tslib_1.__importDefault(require("axios"));
+const open = require("opener");
 const fs_1 = require("fs");
 const vars_1 = require("../vars");
 const core_1 = require("@oclif/core");
@@ -35,9 +36,9 @@ class LoginService {
             if (vars_1.vars.invalidMeValue(this.dotenvMe)) {
                 this.abort.invalidEnvMe();
             }
-            core_1.CliUx.ux.action.start(this.startingMessage());
-            await core_1.CliUx.ux.wait(1000);
-            core_1.CliUx.ux.action.stop();
+            core_1.ux.action.start(this.startingMessage());
+            await core_1.ux.wait(1000);
+            core_1.ux.action.stop();
             const msg = this.doneMessage(this.dotenvMe); // must be prior to writeFile in order to check for existance of .env.me or not
             (0, fs_1.writeFileSync)('.env.me', this.meFileContent(this.dotenvMe));
             this.log.local(msg);
@@ -50,14 +51,14 @@ class LoginService {
     async login(tip = true) {
         if (!this.yes) {
             this.log.local(`Login URL: ${this.loginUrl}`);
-            const answer = await core_1.CliUx.ux.prompt(`${chalk_1.default.dim(this.log.pretextLocal)}Press ${chalk_1.default.green('y')} (or any key) to open up the browser to login and generate credential (.env.me) or ${chalk_1.default.yellow('q')} to exit`);
+            const answer = await core_1.ux.prompt(`${chalk_1.default.dim(this.log.pretextLocal)}Press ${chalk_1.default.green('y')} (or any key) to open up the browser to login and generate credential (.env.me) or ${chalk_1.default.yellow('q')} to exit`);
             if (answer === 'q' || answer === 'Q') {
                 this.abort.quit();
             }
         }
         this.log.local(`Opening browser to ${this.loginUrl}`);
-        core_1.CliUx.ux.open(this.loginUrl).catch(_ => { });
-        core_1.CliUx.ux.action.start(`${chalk_1.default.dim(this.log.pretextLocal)}Waiting for login and credential (.env.me) to be generated`);
+        open(this.loginUrl);
+        core_1.ux.action.start(`${chalk_1.default.dim(this.log.pretextLocal)}Waiting for login and credential (.env.me) to be generated`);
         await this.check(tip);
     }
     async check(tip = true) {
@@ -86,7 +87,7 @@ class LoginService {
         finally {
             if (resp.status < 300) {
                 // Step 3
-                core_1.CliUx.ux.action.stop();
+                core_1.ux.action.stop();
                 const meUid = resp.data.data.meUid;
                 const msg = this.doneMessage(meUid); // must be prior to writeFile in order to check for existance of .env.me or not
                 (0, fs_1.writeFileSync)('.env.me', this.meFileContent(meUid));
@@ -98,11 +99,11 @@ class LoginService {
             }
             else if (this.checkCount < 50) {
                 // 404 - keep trying
-                await core_1.CliUx.ux.wait(2000); // check every 2 seconds
+                await core_1.ux.wait(2000); // check every 2 seconds
                 await this.check(tip); // check again
             }
             else {
-                core_1.CliUx.ux.action.stop('giving up');
+                core_1.ux.action.stop('giving up');
                 this.log.local('Things were taking too long... gave up. Please try again.');
             }
         }
diff --git a/dist/services/logout-service.js b/dist/services/logout-service.js
index e98177fa2d476bf20b1b1c8fc1ae1524eb5a9b89..ab4b433cef8a6b1f50c7b6787482bd7a2517a05b 100644
--- a/dist/services/logout-service.js
+++ b/dist/services/logout-service.js
@@ -7,6 +7,7 @@ const chalk_1 = tslib_1.__importDefault(require("chalk"));
 const axios_1 = tslib_1.__importDefault(require("axios"));
 const vars_1 = require("../vars");
 const core_1 = require("@oclif/core");
+const open = require("opener");
 const log_service_1 = require("../services/log-service");
 const abort_service_1 = require("../services/abort-service");
 class LogoutService {
@@ -25,14 +26,14 @@ class LogoutService {
     async logout(tip = true) {
         if (!this.yes) {
             this.log.local(`Logout URL: ${this.logoutUrl}`);
-            const answer = await core_1.CliUx.ux.prompt(`${chalk_1.default.dim(this.log.pretextLocal)}Press ${chalk_1.default.green('y')} (or any key) to logout and revoke credential (.env.me) or ${chalk_1.default.yellow('q')} to exit`);
+            const answer = await core_1.ux.prompt(`${chalk_1.default.dim(this.log.pretextLocal)}Press ${chalk_1.default.green('y')} (or any key) to logout and revoke credential (.env.me) or ${chalk_1.default.yellow('q')} to exit`);
             if (answer === 'q' || answer === 'Q') {
                 this.abort.quit();
             }
         }
         this.log.local(`Opening browser to ${this.logoutUrl}`);
-        core_1.CliUx.ux.open(this.logoutUrl).catch(_ => { });
-        core_1.CliUx.ux.action.start(`${chalk_1.default.dim(this.log.pretextLocal)}Waiting for logout and credential (.env.me) to be revoked`);
+        open(this.logoutUrl);
+        core_1.ux.action.start(`${chalk_1.default.dim(this.log.pretextLocal)}Waiting for logout and credential (.env.me) to be revoked`);
         await this.check(tip);
     }
     async check(tip = true) {
@@ -61,7 +62,7 @@ class LogoutService {
         finally {
             if (resp.status < 300) {
                 // Step 3
-                core_1.CliUx.ux.action.stop();
+                core_1.ux.action.stop();
                 const meUid = resp.data.data.meUid;
                 this.log.local(`Revoked .env.me (DOTENV_ME=${meUid.slice(0, 9)}...)`);
                 if (tip) {
@@ -71,11 +72,11 @@ class LogoutService {
             }
             else if (this.checkCount < 50) {
                 // 404 - keep trying
-                await core_1.CliUx.ux.wait(2000); // check every 2 seconds
+                await core_1.ux.wait(2000); // check every 2 seconds
                 await this.check(tip); // check again
             }
             else {
-                core_1.CliUx.ux.action.stop('giving up');
+                core_1.ux.action.stop('giving up');
                 this.log.local('Things were taking too long... gave up. Please try again.');
             }
         }
diff --git a/dist/services/new-service.js b/dist/services/new-service.js
index 10c4065f8d80997c1ddc6bb83b7a24df20f521ff..8682c9a5865840c5223ad2c4e89bfa482406bd2c 100644
--- a/dist/services/new-service.js
+++ b/dist/services/new-service.js
@@ -8,6 +8,7 @@ const axios_1 = tslib_1.__importDefault(require("axios"));
 const vars_1 = require("../vars");
 const fs_1 = require("fs");
 const core_1 = require("@oclif/core");
+const open = require("opener");
 const append_to_ignore_service_1 = require("../services/append-to-ignore-service");
 const log_service_1 = require("../services/log-service");
 const abort_service_1 = require("../services/abort-service");
@@ -33,9 +34,9 @@ class NewService {
             if (vars_1.vars.invalidVaultValue(this.dotenvVault)) {
                 this.abort.invalidEnvVault();
             }
-            core_1.CliUx.ux.action.start(`${chalk_1.default.dim(this.log.pretextLocal)}Adding ${vars_1.vars.vaultFilename} (${vars_1.vars.vaultKey})`);
-            await core_1.CliUx.ux.wait(1000);
-            core_1.CliUx.ux.action.stop();
+            core_1.ux.action.start(`${chalk_1.default.dim(this.log.pretextLocal)}Adding ${vars_1.vars.vaultFilename} (${vars_1.vars.vaultKey})`);
+            await core_1.ux.wait(1000);
+            core_1.ux.action.stop();
             (0, fs_1.writeFileSync)(vars_1.vars.vaultFilename, this.vaultFileContent(this.dotenvVault));
             this.log.local(`Added to ${vars_1.vars.vaultFilename} (${vars_1.vars.vaultKey}=${this.dotenvVault.slice(0, 9)}...)`);
             this.log.plain('');
@@ -47,14 +48,14 @@ class NewService {
         }
         if (!this.yes) {
             this.log.local(`New project URL: ${this.urlWithProjectName}`);
-            const answer = await core_1.CliUx.ux.prompt(`${chalk_1.default.dim(this.log.pretextLocal)}Press ${chalk_1.default.green('y')} (or any key) to open up the browser to create a new project vault (.env.vault) or ${chalk_1.default.yellow('q')} to exit`);
+            const answer = await core_1.ux.prompt(`${chalk_1.default.dim(this.log.pretextLocal)}Press ${chalk_1.default.green('y')} (or any key) to open up the browser to create a new project vault (.env.vault) or ${chalk_1.default.yellow('q')} to exit`);
             if (answer === 'q' || answer === 'Q') {
                 this.abort.quit();
             }
         }
         this.log.local(`Opening browser to ${this.urlWithProjectName}`);
-        core_1.CliUx.ux.open(this.urlWithProjectName).catch(_ => { });
-        core_1.CliUx.ux.action.start(`${chalk_1.default.dim(this.log.pretextLocal)}Waiting for project vault (.env.vault) to be created`);
+        open(this.urlWithProjectName);
+        core_1.ux.action.start(`${chalk_1.default.dim(this.log.pretextLocal)}Waiting for project vault (.env.vault) to be created`);
         await this.check();
     }
     async check() {
@@ -82,7 +83,7 @@ class NewService {
         finally {
             if (resp.status < 300) {
                 // Step 3
-                core_1.CliUx.ux.action.stop();
+                core_1.ux.action.stop();
                 const vaultUid = resp.data.data.vaultUid;
                 (0, fs_1.writeFileSync)(vars_1.vars.vaultFilename, this.vaultFileContent(vaultUid));
                 this.log.local(`Added to ${vars_1.vars.vaultFilename} (${vars_1.vars.vaultKey}=${vaultUid.slice(0, 9)}...)`);
@@ -91,11 +92,11 @@ class NewService {
             }
             else if (this.checkCount < 50) {
                 // 404 - keep trying
-                await core_1.CliUx.ux.wait(2000); // check every 2 seconds
+                await core_1.ux.wait(2000); // check every 2 seconds
                 await this.check(); // check again
             }
             else {
-                core_1.CliUx.ux.action.stop('giving up');
+                core_1.ux.action.stop('giving up');
                 this.log.local('Things were taking too long... gave up. Please try again.');
             }
         }
diff --git a/dist/services/open-service.js b/dist/services/open-service.js
index c6c851be34c63f7fd33c33bde611e10b2440ef3c..c91d9824791ceec2dbe0b3c79bf4d9c087728d77 100644
--- a/dist/services/open-service.js
+++ b/dist/services/open-service.js
@@ -7,6 +7,7 @@ const vars_1 = require("../vars");
 const fs_1 = require("fs");
 const core_1 = require("@oclif/core");
 const log_service_1 = require("../services/log-service");
+const open = require("opener");
 const abort_service_1 = require("../services/abort-service");
 class OpenService {
     constructor(attrs = {}) {
@@ -25,16 +26,16 @@ class OpenService {
         }
         if (!this.yes) {
             this.log.local(`Project URL: ${this.openUrl}`);
-            const answer = await core_1.CliUx.ux.prompt(`${chalk_1.default.dim(this.log.pretextLocal)}Press ${chalk_1.default.green('y')} (or any key) to open up the browser to view your project or ${chalk_1.default.yellow('q')} to exit`);
+            const answer = await core_1.ux.prompt(`${chalk_1.default.dim(this.log.pretextLocal)}Press ${chalk_1.default.green('y')} (or any key) to open up the browser to view your project or ${chalk_1.default.yellow('q')} to exit`);
             if (answer === 'q' || answer === 'Q') {
                 this.abort.quit();
             }
         }
-        core_1.CliUx.ux.action.start(`${chalk_1.default.dim(this.log.pretextLocal)}Opening project page`);
-        await core_1.CliUx.ux.wait(1000);
-        core_1.CliUx.ux.action.stop();
+        core_1.ux.action.start(`${chalk_1.default.dim(this.log.pretextLocal)}Opening project page`);
+        await core_1.ux.wait(1000);
+        core_1.ux.action.stop();
         this.log.local(`Opening browser to ${this.openUrl}`);
-        core_1.CliUx.ux.open(this.openUrl).catch(_ => { });
+        open(this.openUrl);
         this.log.plain('');
         this.log.plain(`Next run ${chalk_1.default.bold(`${vars_1.vars.cli} ${this.pushOrPullCommand}`)} to ${this.pushOrPullCommand} your .env file`);
     }
diff --git a/dist/services/pull-service.js b/dist/services/pull-service.js
index 944a63c8e528432cc510ed698b2315265fa864fa..594c30f251b081864a0bbabb8aa104367b6bc030 100644
--- a/dist/services/pull-service.js
+++ b/dist/services/pull-service.js
@@ -45,7 +45,7 @@ class PullService {
         if (this.environment) {
             pullingMsg = `Securely pulling ${this.environment}`;
         }
-        core_1.CliUx.ux.action.start(`${chalk_1.default.dim(this.log.pretextRemote)}${pullingMsg}`);
+        core_1.ux.action.start(`${chalk_1.default.dim(this.log.pretextRemote)}${pullingMsg}`);
         await this.pull();
     }
     async pull() {
@@ -66,7 +66,7 @@ class PullService {
             const newData = resp.data.data.dotenv;
             const newVaultData = resp.data.data.dotenvVault;
             const outputFilename = this.displayFilename(envName);
-            core_1.CliUx.ux.action.stop();
+            core_1.ux.action.stop();
             // backup current file to .previous
             if ((0, fs_1.existsSync)(outputFilename)) {
                 (0, fs_1.renameSync)(outputFilename, `${outputFilename}.previous`);
@@ -81,7 +81,7 @@ class PullService {
             }
         }
         catch (error) {
-            core_1.CliUx.ux.action.stop('aborting');
+            core_1.ux.action.stop('aborting');
             let errorMessage = null;
             let errorCode = 'PULL_ERROR';
             let suggestions = [];
diff --git a/dist/services/push-service.js b/dist/services/push-service.js
index 5aed4a3fcfcbb1cb88245d607410f6c23732bbf3..0fdb280eecf005c1ce36a27dc15a1050cc62aaab 100644
--- a/dist/services/push-service.js
+++ b/dist/services/push-service.js
@@ -46,7 +46,7 @@ class PushService {
         if (this.smartEnvironment) {
             pushingMsg = `Securely pushing ${this.smartEnvironment} (${this.smartFilename})`;
         }
-        core_1.CliUx.ux.action.start(`${chalk_1.default.dim(this.log.pretextRemote)}${pushingMsg}`);
+        core_1.ux.action.start(`${chalk_1.default.dim(this.log.pretextRemote)}${pushingMsg}`);
         await this.push();
     }
     async push() {
@@ -67,7 +67,7 @@ class PushService {
             const envName = resp.data.data.envName;
             const newVaultData = resp.data.data.dotenvVault;
             const outputFilename = this.displayFilename(envName);
-            core_1.CliUx.ux.action.stop();
+            core_1.ux.action.stop();
             this.log.remote(`Securely pushed ${environment} (${outputFilename})`);
             // write .env.vault file
             if (newVaultData) {
@@ -78,7 +78,7 @@ class PushService {
             this.log.plain(`Run ${chalk_1.default.bold(`${vars_1.vars.cli} open`)} to view in the ui`);
         }
         catch (error) {
-            core_1.CliUx.ux.action.stop('aborting');
+            core_1.ux.action.stop('aborting');
             let errorMessage = null;
             let errorCode = 'PUSH_ERROR';
             let suggestions = [];
diff --git a/dist/services/rotatekey-service.js b/dist/services/rotatekey-service.js
index bf49d25036bc9e4f289a632335089f3036ce9dca..545b42400d8301d2f1b5294fb9b36dc617644457 100644
--- a/dist/services/rotatekey-service.js
+++ b/dist/services/rotatekey-service.js
@@ -33,13 +33,13 @@ class RotatekeyService {
             await this.login.login(false);
         }
         if (!this.yes) {
-            const answer = await core_1.CliUx.ux.prompt(`${chalk_1.default.dim(this.log.pretextLocal)}Are you sure you want to rotate your ${this.environment} DOTENV_KEY? Type ${chalk_1.default.green('yes')} to continue`);
+            const answer = await core_1.ux.prompt(`${chalk_1.default.dim(this.log.pretextLocal)}Are you sure you want to rotate your ${this.environment} DOTENV_KEY? Type ${chalk_1.default.green('yes')} to continue`);
             if (answer !== 'yes' && answer !== 'YES' && answer !== 'Yes') {
                 this.abort.quit();
             }
         }
         const rotatekeyMsg = 'Rotating decryption key';
-        core_1.CliUx.ux.action.start(`${chalk_1.default.dim(this.log.pretextRemote)}${rotatekeyMsg}`);
+        core_1.ux.action.start(`${chalk_1.default.dim(this.log.pretextRemote)}${rotatekeyMsg}`);
         await this.rotatekey();
     }
     async rotatekey() {
@@ -57,7 +57,7 @@ class RotatekeyService {
             const resp = await (0, axios_1.default)(options);
             const DOTENV_KEY = resp.data.data.DOTENV_KEY;
             const PREVIOUS_DOTENV_KEY = resp.data.data.PREVIOUS_DOTENV_KEY;
-            core_1.CliUx.ux.action.stop();
+            core_1.ux.action.stop();
             this.log.plain(DOTENV_KEY);
             this.log.plain('');
             this.log.plain('1. Update DOTENV_KEY - comma-append the new value');
@@ -69,7 +69,7 @@ class RotatekeyService {
             this.log.plain(`DOTENV_KEY='${PREVIOUS_DOTENV_KEY},${DOTENV_KEY}'`);
         }
         catch (error) {
-            core_1.CliUx.ux.action.stop('aborting');
+            core_1.ux.action.stop('aborting');
             let errorMessage = null;
             let errorCode = 'ROTATEKEY_ERROR';
             let suggestions = [];
diff --git a/dist/services/status-service.js b/dist/services/status-service.js
index 61063f7a5137b45461a8e3dcd8c5767592992eae..6fb3a3a4859fcedcc175168759d872b788c793f3 100644
--- a/dist/services/status-service.js
+++ b/dist/services/status-service.js
@@ -4,6 +4,7 @@ exports.StatusService = void 0;
 const tslib_1 = require("tslib");
 const chalk_1 = tslib_1.__importDefault(require("chalk"));
 const core_1 = require("@oclif/core");
+const open = require("opener");
 const log_service_1 = require("../services/log-service");
 const abort_service_1 = require("../services/abort-service");
 class StatusService {
@@ -16,16 +17,16 @@ class StatusService {
     async run() {
         if (!this.yes) {
             this.log.local(`Status URL: ${this.statusUrl}`);
-            const answer = await core_1.CliUx.ux.prompt(`${chalk_1.default.dim(this.log.pretextLocal)}Press ${chalk_1.default.green('y')} (or any key) to open up the browser to view the dotenv-vault status page or ${chalk_1.default.yellow('q')} to exit`);
+            const answer = await core_1.ux.prompt(`${chalk_1.default.dim(this.log.pretextLocal)}Press ${chalk_1.default.green('y')} (or any key) to open up the browser to view the dotenv-vault status page or ${chalk_1.default.yellow('q')} to exit`);
             if (answer === 'q' || answer === 'Q') {
                 this.abort.quit();
             }
         }
-        core_1.CliUx.ux.action.start(`${chalk_1.default.dim(this.log.pretextLocal)}Opening status page`);
-        await core_1.CliUx.ux.wait(1000);
-        core_1.CliUx.ux.action.stop();
+        core_1.ux.action.start(`${chalk_1.default.dim(this.log.pretextLocal)}Opening status page`);
+        await core_1.ux.wait(1000);
+        core_1.ux.action.stop();
         this.log.local(`Opening browser to ${this.statusUrl}`);
-        core_1.CliUx.ux.open(this.statusUrl).catch(_ => { });
+        open(this.statusUrl);
     }
     get statusUrl() {
         return 'https://status.dotenv.org';
diff --git a/dist/services/versions-service.js b/dist/services/versions-service.js
index 5fc3dcb036db1e38802d8a26de8b4e3e8cbb1179..b5a95dfd759440b89e93414cf78d339f1b445719 100644
--- a/dist/services/versions-service.js
+++ b/dist/services/versions-service.js
@@ -38,7 +38,7 @@ class VersionsService {
         if (this.smartEnvironment) {
             versionsMsg = `Listing ${this.smartEnvironment} versions`;
         }
-        core_1.CliUx.ux.action.start(`${chalk_1.default.dim(this.log.pretextRemote)}${versionsMsg}`);
+        core_1.ux.action.start(`${chalk_1.default.dim(this.log.pretextRemote)}${versionsMsg}`);
         await this.versions();
     }
     async versions() {
@@ -56,8 +56,8 @@ class VersionsService {
             const resp = await (0, axios_1.default)(options);
             const versions = resp.data.data.versions;
             const environment = resp.data.data.environment;
-            core_1.CliUx.ux.action.stop();
-            core_1.CliUx.ux.table(versions, {
+            core_1.ux.action.stop();
+            core_1.ux.table(versions, {
                 version: {
                     header: 'Ver',
                     minWidth: 7,
@@ -76,7 +76,7 @@ class VersionsService {
             this.log.plain(`Pull a version with ${chalk_1.default.bold(`${vars_1.vars.cli} pull ${environment}@${versions[0].version}`)}`);
         }
         catch (error) {
-            core_1.CliUx.ux.action.stop('aborting');
+            core_1.ux.action.stop('aborting');
             let errorMessage = null;
             let errorCode = 'VERSIONS_ERROR';
             let suggestions = [];
diff --git a/dist/services/whoami-service.js b/dist/services/whoami-service.js
index f16a66e115c92399a11b8746af7d5a89bcaf6aa9..7139c77515d3e983247c33d51ed9b72c2086b05c 100644
--- a/dist/services/whoami-service.js
+++ b/dist/services/whoami-service.js
@@ -45,7 +45,7 @@ class WhoamiService {
             this.log.plain(email);
         }
         catch (error) {
-            core_1.CliUx.ux.action.stop('aborting');
+            core_1.ux.action.stop('aborting');
             let errorMessage = null;
             let errorCode = 'WHOAMI_ERROR';
             let suggestions = [];
