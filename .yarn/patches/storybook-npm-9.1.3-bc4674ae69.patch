diff --git a/bin/index.cjs b/bin/index.cjs
index d0395f4f3f9e415065d539f1dc7cf14f1eb2c824..ce13973e4eb9c3858483445373249c20f2a7261d 100755
--- a/bin/index.cjs
+++ b/bin/index.cjs
@@ -1,8 +1,8 @@
 #!/usr/bin/env node
 
 const majorNodeVersion = parseInt(process.versions.node, 10);
-if (majorNodeVersion < 20) {
-  console.error('To run Storybook you need to have Node.js 20 or higher');
+if (majorNodeVersion < 18) {
+  console.error('To run Storybook you need to have Node.js 18 or higher');
   process.exit(1);
 }
 
diff --git a/dist/builder-manager/index.cjs b/dist/builder-manager/index.cjs
index f94aa98013f05e312c987f234f3a03bd0596ddde..146e075ff30cbfe33abee0eb94703d3ac3d26e97 100644
--- a/dist/builder-manager/index.cjs
+++ b/dist/builder-manager/index.cjs
@@ -2009,7 +2009,7 @@ var Xi = /^\/($|\?)/, D, I, ye = /* @__PURE__ */ o(async (e) => {
     jsxImportSource: "react",
     tsconfig: r,
     legalComments: "external",
-    plugins: [se(Jt.globalsModuleInfoMap), (0, Ut.pnpPlugin)()],
+    plugins: [se(Jt.globalsModuleInfoMap), require('node-stdlib-browser/helpers/esbuild/plugin')(require('node-stdlib-browser')), (0, Ut.pnpPlugin)()],
     banner: {
       js: "try{"
     },
@@ -2017,9 +2017,11 @@ var Xi = /^\/($|\?)/, D, I, ye = /* @__PURE__ */ o(async (e) => {
       js: '}catch(e){ console.error("[Storybook] One of your manager-entries failed: " + import.meta.url, e); }'
     },
     define: {
+      process: "process",
       "process.env": JSON.stringify(a),
       ...(0, Ht.stringifyProcessEnvs)(a),
       global: "window",
+      Buffer: "Buffer",
       module: "{}"
     }
   };
diff --git a/dist/builder-manager/index.js b/dist/builder-manager/index.js
index ef1a9529887d63a28e3b8036229fb678d745b6ef..20d4de3e35c8e04a215c5c8adbeab14607c32bca 100644
--- a/dist/builder-manager/index.js
+++ b/dist/builder-manager/index.js
@@ -2022,7 +2022,7 @@ var mr = /^\/($|\?)/, L, A, _t = /* @__PURE__ */ o(async (e) => {
     jsxImportSource: "react",
     tsconfig: r,
     legalComments: "external",
-    plugins: [Z(pr), (0, At.pnpPlugin)()],
+    plugins: [Z(pr), require('node-stdlib-browser/helpers/esbuild/plugin')(require('node-stdlib-browser')), (0, At.pnpPlugin)()],
     banner: {
       js: "try{"
     },
@@ -2030,9 +2030,11 @@ var mr = /^\/($|\?)/, L, A, _t = /* @__PURE__ */ o(async (e) => {
       js: '}catch(e){ console.error("[Storybook] One of your manager-entries failed: " + import.meta.url, e); }'
     },
     define: {
+      process: "process",
       "process.env": JSON.stringify(a),
       ...cr(a),
       global: "window",
+      Buffer: "Buffer",
       module: "{}"
     }
   };
diff --git a/dist/common/index.cjs b/dist/common/index.cjs
index 373d1131e1c9e1e89f7f12060112563acae65ce8..21fbbf217c69078758ad12518169392d1e451ec9 100644
--- a/dist/common/index.cjs
+++ b/dist/common/index.cjs
@@ -18774,14 +18774,14 @@ s(Ea, "getInterpretedFileWithExt");
 
 // src/common/utils/interpret-require.ts
 var KE = !1;
-function sn(t) {
+async function sn(t) {
   let A = !!require("module")._extensions[".ts"];
   if (KE === !1 && !A) {
     let { register: i } = require("esbuild-register/dist/node");
     KE = !0, i({
       target: `node${process.version.slice(1)}`,
       format: "cjs",
-      hookIgnoreNodeModules: !0,
+      hookIgnoreNodeModules: !1,
       // Some frameworks, like Stylus, rely on the 'name' property of classes or functions
       // https://github.com/storybookjs/storybook/issues/19049
       keepNames: !0,
@@ -18793,7 +18793,9 @@ function sn(t) {
     }`
     });
   }
-  let e = require(t);
+  const { isAbsolute } = require('node:path');
+  const { pathToFileURL } = require('node:url');
+  let e = await import(isAbsolute(t) ? pathToFileURL(t).href : t);
   return typeof e == "object" && e !== null && typeof e.default < "u" ? e.default : e;
 }
 s(sn, "interopRequireDefault");
@@ -23418,10 +23420,10 @@ async function ts(t, A) {
 s(ts, "validateConfigurationFiles");
 
 // src/common/utils/load-custom-presets.ts
-function xa({ configDir: t }) {
+async function xa({ configDir: t }) {
   ts(t);
-  let A = Ur((0, Kn.resolve)(t, "presets"));
-  if (Ur((0, Kn.resolve)(t, "main"))) {
+  let A = await Ur((0, Kn.resolve)(t, "presets"));
+  if (await Ur((0, Kn.resolve)(t, "main"))) {
     let r = _r((0, Kn.resolve)(t, "main"));
     if (r)
       return [r];
@@ -23664,7 +23666,7 @@ s(Ju, "getPresets");
 async function oN(t) {
   let { corePresets: A = [], overridePresets: e = [], ...r } = t, i = [
     ...A,
-    ...xa(t),
+    ...await xa(t),
     ...e
   ], n = Pu(i);
   return n.length < i.length && Zr.logger.warn(
diff --git a/dist/common/index.js b/dist/common/index.js
index 50566f54552c6267e68043ea05cd8e4459b99218..7ed5660fb7a38e14f2143fd362b3b9956e31715d 100644
--- a/dist/common/index.js
+++ b/dist/common/index.js
@@ -18704,14 +18704,14 @@ s(Ql, "getInterpretedFileWithExt");
 
 // src/common/utils/interpret-require.ts
 var fl = !1;
-function pg(t) {
+async function pg(t) {
   let A = !!v("module")._extensions[".ts"];
   if (fl === !1 && !A) {
     let { register: i } = v("esbuild-register/dist/node");
     fl = !0, i({
       target: `node${process.version.slice(1)}`,
       format: "cjs",
-      hookIgnoreNodeModules: !0,
+      hookIgnoreNodeModules: !1,
       // Some frameworks, like Stylus, rely on the 'name' property of classes or functions
       // https://github.com/storybookjs/storybook/issues/19049
       keepNames: !0,
@@ -18723,7 +18723,9 @@ function pg(t) {
     }`
     });
   }
-  let e = v(t);
+  const { isAbsolute } = require('node:path');
+  const { pathToFileURL } = require('node:url');
+  let e = await import(isAbsolute(t) ? pathToFileURL(t).href : t);
   return typeof e == "object" && e !== null && typeof e.default < "u" ? e.default : e;
 }
 s(pg, "interopRequireDefault");
@@ -23356,10 +23358,10 @@ async function zs(t, A) {
 s(zs, "validateConfigurationFiles");
 
 // src/common/utils/load-custom-presets.ts
-function QE({ configDir: t }) {
+async function QE({ configDir: t }) {
   zs(t);
-  let A = li(Jg(t, "presets"));
-  if (li(Jg(t, "main"))) {
+  let A = await li(Jg(t, "presets"));
+  if (await li(Jg(t, "main"))) {
     let r = Ei(Jg(t, "main"));
     if (r)
       return [r];
@@ -23602,7 +23604,7 @@ s(zk, "getPresets");
 async function O1(t) {
   let { corePresets: A = [], overridePresets: e = [], ...r } = t, i = [
     ...A,
-    ...QE(t),
+    ...await QE(t),
     ...e
   ], n = Ok(i);
   return n.length < i.length && Mi.warn(
diff --git a/dist/core-server/index.cjs b/dist/core-server/index.cjs
index b828ca3b99a95dd1faba55aaf1ccb5c3bedf1055..32573ba18e0388485ca413f1821f85b0115fdaf1 100644
--- a/dist/core-server/index.cjs
+++ b/dist/core-server/index.cjs
@@ -39683,7 +39683,7 @@ async function Ng(e) {
   await (0, fF.rm)(e.outputDir, { recursive: !0, force: !0 }).catch(() => {
   }), await (0, bc.mkdir)(e.outputDir, { recursive: !0 });
   let t = await (0, Vr.loadMainConfig)(e), { framework: r } = t, n = [], i = typeof r == "string" ? r : r?.name;
-  i ? n.push((0, vr.join)(i, "preset")) : e.ignorePreview || Rn.logger.warn(`you have not specified a framework in your ${e.configDir}/main.\
+  i ? n.push(require.resolve((0, vr.join)(i, "preset"))) : e.ignorePreview || Rn.logger.warn(`you have not specified a framework in your ${e.configDir}/main.\
 js`), Rn.logger.info("=> Loading presets");
   let o = await (0, Vr.loadAllPresets)({
     corePresets: [
@@ -44109,7 +44109,7 @@ async function bx(e) {
   e.smokeTest && (p = c), e.port = a, e.versionCheck = u, e.configType = "DEVELOPMENT", e.configDir = o, e.cacheKey = l, e.outputDir = p, e.
   serverChannelUrl = I6(a, e);
   let h = await (0, ft.loadMainConfig)(e), { framework: f } = h, d = [], m = typeof f == "string" ? f : f?.name;
-  e.ignorePreview || (0, ft.validateFrameworkName)(m), m && d.push((0, Ai.join)(m, "preset")), m = m || "custom";
+  e.ignorePreview || (0, ft.validateFrameworkName)(m), m && d.push(require.resolve((0, Ai.join)(m, "preset"))), m = m || "custom";
   let g = ft.JsPackageManagerFactory.getPackageManager({
     configDir: e.configDir
   });
@@ -44214,7 +44214,7 @@ async function nh(e) {
   let t = (0, Vo.resolve)(e.configDir), r = (0, GR.oneWayHash)((0, Vo.relative)((0, Xr.getProjectRoot)(), t));
   e.configType = "DEVELOPMENT", e.configDir = t, e.cacheKey = r;
   let n = await (0, Xr.loadMainConfig)(e), { framework: i } = n, o = [], a = typeof i == "string" ? i : i?.name;
-  e.ignorePreview || (0, Xr.validateFrameworkName)(a), a && o.push((0, Vo.join)(a, "preset")), a = a || "custom";
+  e.ignorePreview || (0, Xr.validateFrameworkName)(a), a && o.push(require.resolve((0, Vo.join)(a, "preset"))), a = a || "custom";
   let u = await (0, Xr.loadAllPresets)({
     corePresets: o,
     overridePresets: [
diff --git a/dist/core-server/index.js b/dist/core-server/index.js
index 14cd03e3dff1dab343741dfb4c47d5462c98228b..5b96bd8bddb331a028ff8d8d1122ade3fedd3783 100644
--- a/dist/core-server/index.js
+++ b/dist/core-server/index.js
@@ -39704,7 +39704,7 @@ async function lA(e) {
   await lH(e.outputDir, { recursive: !0, force: !0 }).catch(() => {
   }), await uH(e.outputDir, { recursive: !0 });
   let t = await hH(e), { framework: r } = t, n = [], i = typeof r == "string" ? r : r?.name;
-  i ? n.push(Ll(i, "preset")) : e.ignorePreview || Zn.warn(`you have not specified a framework in your ${e.configDir}/main.js`), Zn.info("=>\
+  i ? n.push(require.resolve(Ll(i, "preset"))) : e.ignorePreview || Zn.warn(`you have not specified a framework in your ${e.configDir}/main.js`), Zn.info("=>\
  Loading presets");
   let o = await oA({
     corePresets: [
@@ -44205,7 +44205,7 @@ async function a8(e) {
   e.smokeTest && (p = c), e.port = a, e.versionCheck = u, e.configType = "DEVELOPMENT", e.configDir = o, e.cacheKey = l, e.outputDir = p, e.
   serverChannelUrl = XB(a, e);
   let h = await joe(e), { framework: f } = h, d = [], m = typeof f == "string" ? f : f?.name;
-  e.ignorePreview || Voe(m), m && d.push(Boe(m, "preset")), m = m || "custom";
+  e.ignorePreview || Voe(m), m && d.push(require.resolve(Boe(m, "preset"))), m = m || "custom";
   let g = Roe.getPackageManager({
     configDir: e.configDir
   });
@@ -44321,7 +44321,7 @@ async function bD(e) {
   let t = Koe(e.configDir), r = rae(Xoe(Yoe(), t));
   e.configType = "DEVELOPMENT", e.configDir = t, e.cacheKey = r;
   let n = await Qoe(e), { framework: i } = n, o = [], a = typeof i == "string" ? i : i?.name;
-  e.ignorePreview || tae(a), a && o.push(Zoe(a, "preset")), a = a || "custom";
+  e.ignorePreview || tae(a), a && o.push(require.resolve(Zoe(a, "preset"))), a = a || "custom";
   let u = await u8({
     corePresets: o,
     overridePresets: [
