diff --git a/src/cli/actions/get.js b/src/cli/actions/get.js
index 9f1de35d02d3bf7db540c76c1ee763a7fedb1e64..94186a75c8973fed181050787c2dd655f57daa24 100644
--- a/src/cli/actions/get.js
+++ b/src/cli/actions/get.js
@@ -12,12 +12,12 @@ function get (key) {
 
   if (typeof value === 'object' && value !== null) {
     if (options.prettyPrint) {
-      logger.blank(JSON.stringify(value, null, 2))
+      console.log(JSON.stringify(value, null, 2))
     } else {
-      logger.blank(value)
+      console.log(value)
     }
   } else {
-    logger.blank(value)
+    console.log(value)
   }
 }
 
diff --git a/src/cli/actions/run.js b/src/cli/actions/run.js
index a160e30acc58a78cf1cadf17b2e5bcb15c7ae2f0..4600422a8a7bf9cd74272fb6f184d51f66275489 100644
--- a/src/cli/actions/run.js
+++ b/src/cli/actions/run.js
@@ -89,6 +89,10 @@ async function run () {
   const options = this.opts()
   logger.debug(`options: ${JSON.stringify(options)}`)
 
+  let files
+  let readableFilepaths
+  let uniqueInjectedKeys
+
   // load from .env.vault file
   if (process.env.DOTENV_KEY && process.env.DOTENV_KEY.length > 0) {
     try {
@@ -97,8 +101,12 @@ async function run () {
         parsed,
         injected,
         preExisted,
-        uniqueInjectedKeys
-      } = new RunVault(options.envVaultFile, options.env, process.env.DOTENV_KEY, options.overload).run()
+        ...outputs
+      } = new RunVault(options.envVaultFile, options.envFile, options.env, process.env.DOTENV_KEY, options.overload).run()
+
+      files = outputs.files
+      readableFilepaths = [...outputs.readableFilepaths]
+      uniqueInjectedKeys = [...outputs.uniqueInjectedKeys]
 
       logger.verbose(`loading env from encrypted ${envVaultFile} (${path.resolve(envVaultFile)})`)
       logger.debug(`decrypting encrypted env from ${envVaultFile} (${path.resolve(envVaultFile)})`)
@@ -119,61 +127,64 @@ async function run () {
       }
 
       logger.successv(`injecting env (${uniqueInjectedKeys.length}) from encrypted ${envVaultFile}`)
+
+
     } catch (error) {
       logger.error(error.message)
       if (error.help) {
         logger.help(error.help)
       }
+      return;
     }
   } else {
-    const {
-      files,
-      readableFilepaths,
-      uniqueInjectedKeys
-    } = new RunDefault(options.envFile, options.env, options.overload).run()
-
-    for (const file of files) {
-      const filepath = file.filepath
-
-      logger.verbose(`loading env from ${filepath} (${path.resolve(filepath)})`)
-
-      if (file.error) {
-        if (file.error.code === 'MISSING_ENV_FILE') {
-          logger.warnv(file.error)
-          logger.help(`? in development: add one with [echo "HELLO=World" > ${filepath}] and re-run [dotenvx run -- ${commandArgs.join(' ')}]`)
-          logger.help('? for production: set [DOTENV_KEY] on your server and re-deploy')
-          logger.help('? for ci: set [DOTENV_KEY] on your ci and re-build')
-        } else {
-          logger.warnv(file.error)
-        }
+    const outputs = new RunDefault(options.envFile, options.env, options.overload).run()
+
+    files = outputs.files
+    readableFilepaths = [...outputs.readableFilepaths]
+    uniqueInjectedKeys = [...outputs.uniqueInjectedKeys]
+  }
+
+  for (const file of files) {
+    const filepath = file.filepath
+
+    logger.verbose(`loading env from ${filepath} (${path.resolve(filepath)})`)
+
+    if (file.error) {
+      if (file.error.code === 'MISSING_ENV_FILE') {
+        logger.warnv(file.error)
+        logger.help(`? in development: add one with [echo "HELLO=World" > ${filepath}] and re-run [dotenvx run -- ${commandArgs.join(' ')}]`)
+        logger.help('? for production: set [DOTENV_KEY] on your server and re-deploy')
+        logger.help('? for ci: set [DOTENV_KEY] on your ci and re-build')
       } else {
-        // debug parsed
-        const parsed = file.parsed
-        logger.debug(parsed)
-
-        // verbose/debug injected key/value
-        const injected = file.injected
-        for (const [key, value] of Object.entries(injected)) {
-          logger.verbose(`${key} set`)
-          logger.debug(`${key} set to ${value}`)
-        }
-
-        // verbose/debug preExisted key/value
-        const preExisted = file.preExisted
-        for (const [key, value] of Object.entries(preExisted)) {
-          logger.verbose(`${key} pre-exists (protip: use --overload to override)`)
-          logger.debug(`${key} pre-exists as ${value} (protip: use --overload to override)`)
-        }
+        logger.warnv(file.error)
       }
-    }
+    } else {
+      // debug parsed
+      const parsed = file.parsed
+      logger.debug(parsed)
 
-    let msg = `injecting env (${uniqueInjectedKeys.length})`
-    if (readableFilepaths.length > 0) {
-      msg += ` from ${readableFilepaths}`
+      // verbose/debug injected key/value
+      const injected = file.injected
+      for (const [key, value] of Object.entries(injected)) {
+        logger.verbose(`${key} set`)
+        logger.debug(`${key} set to ${value}`)
+      }
+
+      // verbose/debug preExisted key/value
+      const preExisted = file.preExisted
+      for (const [key, value] of Object.entries(preExisted)) {
+        logger.verbose(`${key} pre-exists (protip: use --overload to override)`)
+        logger.debug(`${key} pre-exists as ${value} (protip: use --overload to override)`)
+      }
     }
-    logger.successv(msg)
   }
 
+  let msg = `injecting env (${uniqueInjectedKeys.length})`
+  if (readableFilepaths.length > 0) {
+    msg += ` from ${readableFilepaths}`
+  }
+  logger.successv(msg)
+
   // Extract command and arguments after '--'
   const commandIndex = process.argv.indexOf('--')
   if (commandIndex === -1 || commandIndex === process.argv.length - 1) {
diff --git a/src/lib/services/get.js b/src/lib/services/get.js
index 07437fbcae2b4f10a5a3c7e42436bfc8ad27dc56..dc77fa2ae27fa2479c341f0e558085c39489e117 100644
--- a/src/lib/services/get.js
+++ b/src/lib/services/get.js
@@ -1,5 +1,6 @@
 const dotenv = require('dotenv')
 const dotenvExpand = require('dotenv-expand')
+const logger = require('../../shared/logger')
 
 class Get {
   constructor (key, envFile = '.env', overload = false, all = false) {
@@ -10,6 +11,11 @@ class Get {
   }
 
   run () {
+    if ( process.env.DOTENV_KEY ) {
+      logger.warn("DOTENV_KEY is not supported for `get`")
+      delete process.env.DOTENV_KEY;
+    }
+
     const clonedEnv = { ...process.env }
     const options = {
       processEnv: clonedEnv,
diff --git a/src/lib/services/runDefault.js b/src/lib/services/runDefault.js
index f6d8906e3399ba4d8c886e821ec8bdc970bcf1d4..1ca32a4fa3540c386d335b0134b369dcd88669b5 100644
--- a/src/lib/services/runDefault.js
+++ b/src/lib/services/runDefault.js
@@ -79,8 +79,8 @@ class RunDefault {
     return {
       files,
       strings,
-      readableFilepaths: [...readableFilepaths], // array
-      uniqueInjectedKeys: [...uniqueInjectedKeys]
+      readableFilepaths,
+      uniqueInjectedKeys
     }
   }
 
diff --git a/src/lib/services/runVault.js b/src/lib/services/runVault.js
index 0e966757f76e6598ed18e240317524b3239df654..e3b4bd603e93dda3e3ba36659ef6d8709a06297b 100644
--- a/src/lib/services/runVault.js
+++ b/src/lib/services/runVault.js
@@ -2,6 +2,7 @@ const fs = require('fs')
 const path = require('path')
 const dotenv = require('dotenv')
 
+const RunDefault = require('./runDefault')
 const inject = require('./../helpers/inject')
 const decrypt = require('./../helpers/decrypt')
 const parseExpandAndEval = require('./../helpers/parseExpandAndEval')
@@ -9,15 +10,22 @@ const parseEnvironmentFromDotenvKey = require('./../helpers/parseEnvironmentFrom
 
 const ENCODING = 'utf8'
 
-class RunVault {
-  constructor (envVaultFile = '.env.vault', env = [], DOTENV_KEY = '', overload = false) {
+class RunVault extends RunDefault {
+  constructor (envVaultFile = '.env.vault', envFile = '.env', env = [], DOTENV_KEY = '', overload = false) {
+    super(envFile, env, overload);
+
     this.DOTENV_KEY = DOTENV_KEY
     this.envVaultFile = envVaultFile
-    this.env = env
-    this.overload = overload
   }
 
   run () {
+    const {
+      files,
+      strings,
+      readableFilepaths,
+      uniqueInjectedKeys
+    } = super.run();
+
     const filepath = path.resolve(this.envVaultFile)
     if (!fs.existsSync(filepath)) {
       const code = 'MISSING_ENV_VAULT_FILE'
@@ -35,9 +43,6 @@ class RunVault {
       throw error
     }
 
-    const strings = []
-    const uniqueInjectedKeys = new Set()
-
     const envs = this._envs()
     for (const env of envs) {
       const row = {}
@@ -85,6 +90,8 @@ class RunVault {
     }
 
     return {
+      files,
+      readableFilepaths,
       envVaultFile: this.envVaultFile, // filepath
       strings,
       dotenvKeys,
@@ -92,7 +99,7 @@ class RunVault {
       parsed,
       injected,
       preExisted,
-      uniqueInjectedKeys: [...uniqueInjectedKeys]
+      uniqueInjectedKeys
     }
   }
 
@@ -123,14 +130,6 @@ class RunVault {
     const src = fs.readFileSync(filepath, { encoding: ENCODING })
     return dotenv.parse(src)
   }
-
-  _envs () {
-    if (!Array.isArray(this.env)) {
-      return [this.env]
-    }
-
-    return this.env
-  }
 }
 
 module.exports = RunVault
