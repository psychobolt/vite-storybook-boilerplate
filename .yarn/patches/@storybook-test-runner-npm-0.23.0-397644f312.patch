diff --git a/dist/index.js b/dist/index.js
index d8ab6e13b2a71da3fabf6ff506ef1ba1a3a26223..da15b4423c6f7a4c86ad9e1a44fabaf8d85bb039 100644
--- a/dist/index.js
+++ b/dist/index.js
@@ -10524,11 +10524,11 @@ var import_path2 = require("path");
 var import_common2 = require("storybook/internal/common");
 var testRunnerConfig;
 var loaded = false;
-var getTestRunnerConfig = /* @__PURE__ */ __name((configDir = process.env.STORYBOOK_CONFIG_DIR ?? ".storybook") => {
+var getTestRunnerConfig = /* @__PURE__ */ __name(async (configDir = process.env.STORYBOOK_CONFIG_DIR ?? ".storybook") => {
   if (loaded) {
     return testRunnerConfig;
   }
-  testRunnerConfig = (0, import_common2.serverRequire)((0, import_path2.join)((0, import_path2.resolve)(configDir), "test-runner"));
+  testRunnerConfig = await (0, import_common2.serverRequire)((0, import_path2.join)((0, import_path2.resolve)(configDir), "test-runner"));
   loaded = true;
   return testRunnerConfig;
 }, "getTestRunnerConfig");
@@ -10567,7 +10567,7 @@ var setupPage = /* @__PURE__ */ __name(async (page, browserContext) => {
   if ("TARGET_URL" in process.env && !process.env.TARGET_URL) {
     console.warn(`Received TARGET_URL but with a falsy value: ${process.env.TARGET_URL}. Please fix it.`);
   }
-  const testRunnerConfig2 = getTestRunnerConfig() || {};
+  const testRunnerConfig2 = await getTestRunnerConfig() || {};
   if (testRunnerConfig2?.prepare) {
     await testRunnerConfig2.prepare({
       page,
@@ -10671,11 +10671,11 @@ var {
 var import_path3 = require("path");
 var import_common3 = require("storybook/internal/common");
 var storybookMainConfig = /* @__PURE__ */ new Map();
-var getStorybookMain = /* @__PURE__ */ __name((configDir = ".storybook") => {
+var getStorybookMain = /* @__PURE__ */ __name(async (configDir = ".storybook") => {
   if (storybookMainConfig.has(configDir)) {
     return storybookMainConfig.get(configDir);
   } else {
-    storybookMainConfig.set(configDir, (0, import_common3.serverRequire)((0, import_path3.join)((0, import_path3.resolve)(configDir), "main")));
+    storybookMainConfig.set(configDir, await (0, import_common3.serverRequire)((0, import_path3.join)((0, import_path3.resolve)(configDir), "main")));
   }
   const mainConfig = storybookMainConfig.get(configDir);
   if (!mainConfig) {
@@ -10694,10 +10694,10 @@ var getStorybookMain = /* @__PURE__ */ __name((configDir = ".storybook") => {
 // src/util/getStorybookMetadata.ts
 var import_path4 = require("path");
 var import_common4 = require("storybook/internal/common");
-var getStorybookMetadata = /* @__PURE__ */ __name(() => {
+var getStorybookMetadata = /* @__PURE__ */ __name(async () => {
   const workingDir = (0, import_common4.getProjectRoot)();
   const configDir = process.env.STORYBOOK_CONFIG_DIR ?? ".storybook";
-  const main = getStorybookMain(configDir);
+  const main = await getStorybookMain(configDir);
   const normalizedStoriesEntries = (0, import_common4.normalizeStories)(main.stories, {
     configDir,
     workingDir
@@ -10726,8 +10726,8 @@ var t = __toESM(require("@babel/types"));
 var import_generator = __toESM(require("@babel/generator"));
 
 // src/util/getTagOptions.ts
-function getTagOptions() {
-  const config = getTestRunnerConfig();
+async function getTagOptions() {
+  const config = await getTestRunnerConfig();
   let tagOptions = {
     includeTags: config?.tags?.include || [
       "test"
@@ -10793,10 +10793,10 @@ var makeBeforeEach = /* @__PURE__ */ __name((beforeEachPrefixer) => {
 var makeArray = /* @__PURE__ */ __name((templateResult) => Array.isArray(templateResult) ? templateResult : [
   templateResult
 ], "makeArray");
-var transformCsf = /* @__PURE__ */ __name((code, { clearBody = false, testPrefixer: testPrefixer2, beforeEachPrefixer, insertTestIfEmpty, makeTitle, previewAnnotations = {
+var transformCsf = /* @__PURE__ */ __name(async (code, { clearBody = false, testPrefixer: testPrefixer2, beforeEachPrefixer, insertTestIfEmpty, makeTitle, previewAnnotations = {
   tags: []
 } }) => {
-  const { includeTags, excludeTags, skipTags } = getTagOptions();
+  const { includeTags, excludeTags, skipTags } = await getTagOptions();
   const csf = (0, import_csf_tools.loadCsf)(code, {
     makeTitle: makeTitle ?? ((userTitle) => userTitle)
   });
@@ -10927,23 +10927,23 @@ var testPrefixer = /* @__PURE__ */ __name((context) => {
     ...context
   });
 }, "testPrefixer");
-var makeTitleFactory = /* @__PURE__ */ __name((filename) => {
-  const { workingDir, normalizedStoriesEntries } = getStorybookMetadata();
+var makeTitleFactory = /* @__PURE__ */ __name(async (filename) => {
+  const { workingDir, normalizedStoriesEntries } = await getStorybookMetadata();
   const filePath = `./${(0, import_path5.relative)(workingDir, filename)}`;
   return (userTitle) => (0, import_preview_api.userOrAutoTitle)(filePath, normalizedStoriesEntries, userTitle);
 }, "makeTitleFactory");
-var transformPlaywright = /* @__PURE__ */ __name((src, filename) => {
+var transformPlaywright = /* @__PURE__ */ __name(async (src, filename) => {
   const tags = process.env.STORYBOOK_PREVIEW_TAGS?.split(",") ?? [];
   const transformOptions = {
     testPrefixer,
     insertTestIfEmpty: true,
     clearBody: true,
-    makeTitle: makeTitleFactory(filename),
+    makeTitle: await makeTitleFactory(filename),
     previewAnnotations: {
       tags
     }
   };
-  const result = transformCsf(src, transformOptions);
+  const result = await transformCsf(src, transformOptions);
   return result;
 }, "transformPlaywright");
 // Annotate the CommonJS export names for ESM import in node:
diff --git a/dist/index.mjs b/dist/index.mjs
index a910edaf4985a7e00152aa5d738e035f2ff49235..662cc415699b165300990421f29245881bdfba05 100644
--- a/dist/index.mjs
+++ b/dist/index.mjs
@@ -10507,11 +10507,11 @@ import { join, resolve } from "path";
 import { serverRequire } from "storybook/internal/common";
 var testRunnerConfig;
 var loaded = false;
-var getTestRunnerConfig = /* @__PURE__ */ __name((configDir = process.env.STORYBOOK_CONFIG_DIR ?? ".storybook") => {
+var getTestRunnerConfig = /* @__PURE__ */ __name(async (configDir = process.env.STORYBOOK_CONFIG_DIR ?? ".storybook") => {
   if (loaded) {
     return testRunnerConfig;
   }
-  testRunnerConfig = serverRequire(join(resolve(configDir), "test-runner"));
+  testRunnerConfig = await serverRequire(join(resolve(configDir), "test-runner"));
   loaded = true;
   return testRunnerConfig;
 }, "getTestRunnerConfig");
@@ -10550,7 +10550,7 @@ var setupPage = /* @__PURE__ */ __name(async (page, browserContext) => {
   if ("TARGET_URL" in process.env && !process.env.TARGET_URL) {
     console.warn(`Received TARGET_URL but with a falsy value: ${process.env.TARGET_URL}. Please fix it.`);
   }
-  const testRunnerConfig2 = getTestRunnerConfig() || {};
+  const testRunnerConfig2 = await getTestRunnerConfig() || {};
   if (testRunnerConfig2?.prepare) {
     await testRunnerConfig2.prepare({
       page,
@@ -10654,11 +10654,11 @@ var {
 import { join as join2, resolve as resolve2 } from "path";
 import { serverRequire as serverRequire2 } from "storybook/internal/common";
 var storybookMainConfig = /* @__PURE__ */ new Map();
-var getStorybookMain = /* @__PURE__ */ __name((configDir = ".storybook") => {
+var getStorybookMain = /* @__PURE__ */ __name(async (configDir = ".storybook") => {
   if (storybookMainConfig.has(configDir)) {
     return storybookMainConfig.get(configDir);
   } else {
-    storybookMainConfig.set(configDir, serverRequire2(join2(resolve2(configDir), "main")));
+    storybookMainConfig.set(configDir, await serverRequire2(join2(resolve2(configDir), "main")));
   }
   const mainConfig = storybookMainConfig.get(configDir);
   if (!mainConfig) {
@@ -10677,10 +10677,10 @@ var getStorybookMain = /* @__PURE__ */ __name((configDir = ".storybook") => {
 // src/util/getStorybookMetadata.ts
 import { join as join3 } from "path";
 import { normalizeStories, getProjectRoot as getProjectRoot2 } from "storybook/internal/common";
-var getStorybookMetadata = /* @__PURE__ */ __name(() => {
+var getStorybookMetadata = /* @__PURE__ */ __name(async () => {
   const workingDir = getProjectRoot2();
   const configDir = process.env.STORYBOOK_CONFIG_DIR ?? ".storybook";
-  const main = getStorybookMain(configDir);
+  const main = await getStorybookMain(configDir);
   const normalizedStoriesEntries = normalizeStories(main.stories, {
     configDir,
     workingDir
@@ -10709,8 +10709,8 @@ import * as t from "@babel/types";
 import generate from "@babel/generator";
 
 // src/util/getTagOptions.ts
-function getTagOptions() {
-  const config = getTestRunnerConfig();
+async function getTagOptions() {
+  const config = await getTestRunnerConfig();
   let tagOptions = {
     includeTags: config?.tags?.include || [
       "test"
@@ -10776,10 +10776,10 @@ var makeBeforeEach = /* @__PURE__ */ __name((beforeEachPrefixer) => {
 var makeArray = /* @__PURE__ */ __name((templateResult) => Array.isArray(templateResult) ? templateResult : [
   templateResult
 ], "makeArray");
-var transformCsf = /* @__PURE__ */ __name((code, { clearBody = false, testPrefixer: testPrefixer2, beforeEachPrefixer, insertTestIfEmpty, makeTitle, previewAnnotations = {
+var transformCsf = /* @__PURE__ */ __name(async (code, { clearBody = false, testPrefixer: testPrefixer2, beforeEachPrefixer, insertTestIfEmpty, makeTitle, previewAnnotations = {
   tags: []
 } }) => {
-  const { includeTags, excludeTags, skipTags } = getTagOptions();
+  const { includeTags, excludeTags, skipTags } = await getTagOptions();
   const csf = loadCsf(code, {
     makeTitle: makeTitle ?? ((userTitle) => userTitle)
   });
@@ -10910,23 +10910,23 @@ var testPrefixer = /* @__PURE__ */ __name((context) => {
     ...context
   });
 }, "testPrefixer");
-var makeTitleFactory = /* @__PURE__ */ __name((filename) => {
-  const { workingDir, normalizedStoriesEntries } = getStorybookMetadata();
+var makeTitleFactory = /* @__PURE__ */ __name(async (filename) => {
+  const { workingDir, normalizedStoriesEntries } = await getStorybookMetadata();
   const filePath = `./${relative(workingDir, filename)}`;
   return (userTitle) => userOrAutoTitle(filePath, normalizedStoriesEntries, userTitle);
 }, "makeTitleFactory");
-var transformPlaywright = /* @__PURE__ */ __name((src, filename) => {
+var transformPlaywright = /* @__PURE__ */ __name(async (src, filename) => {
   const tags = process.env.STORYBOOK_PREVIEW_TAGS?.split(",") ?? [];
   const transformOptions = {
     testPrefixer,
     insertTestIfEmpty: true,
     clearBody: true,
-    makeTitle: makeTitleFactory(filename),
+    makeTitle: await makeTitleFactory(filename),
     previewAnnotations: {
       tags
     }
   };
-  const result = transformCsf(src, transformOptions);
+  const result = await transformCsf(src, transformOptions);
   return result;
 }, "transformPlaywright");
 export {
diff --git a/dist/test-storybook.js b/dist/test-storybook.js
index 7b699df9f74777505f6ce4a1c376ad378240ecfa..07faf2c7518203b375a6ad76c94f99840034584e 100755
--- a/dist/test-storybook.js
+++ b/dist/test-storybook.js
@@ -24410,11 +24410,11 @@ var import_common2 = require("storybook/internal/common");
 var import_path = require("path");
 var import_common = require("storybook/internal/common");
 var storybookMainConfig = /* @__PURE__ */ new Map();
-var getStorybookMain = /* @__PURE__ */ __name((configDir = ".storybook") => {
+var getStorybookMain = /* @__PURE__ */ __name(async (configDir = ".storybook") => {
   if (storybookMainConfig.has(configDir)) {
     return storybookMainConfig.get(configDir);
   } else {
-    storybookMainConfig.set(configDir, (0, import_common.serverRequire)((0, import_path.join)((0, import_path.resolve)(configDir), "main")));
+    storybookMainConfig.set(configDir, await (0, import_common.serverRequire)((0, import_path.join)((0, import_path.resolve)(configDir), "main")));
   }
   const mainConfig = storybookMainConfig.get(configDir);
   if (!mainConfig) {
@@ -24431,10 +24431,10 @@ var getStorybookMain = /* @__PURE__ */ __name((configDir = ".storybook") => {
 }, "getStorybookMain");
 
 // src/util/getStorybookMetadata.ts
-var getStorybookMetadata = /* @__PURE__ */ __name(() => {
+var getStorybookMetadata = /* @__PURE__ */ __name(async () => {
   const workingDir = (0, import_common2.getProjectRoot)();
   const configDir = process.env.STORYBOOK_CONFIG_DIR ?? ".storybook";
-  const main2 = getStorybookMain(configDir);
+  const main2 = await getStorybookMain(configDir);
   const normalizedStoriesEntries = (0, import_common2.normalizeStories)(main2.stories, {
     configDir,
     workingDir
@@ -24461,11 +24461,11 @@ var import_path3 = require("path");
 var import_common3 = require("storybook/internal/common");
 var testRunnerConfig;
 var loaded = false;
-var getTestRunnerConfig = /* @__PURE__ */ __name((configDir = process.env.STORYBOOK_CONFIG_DIR ?? ".storybook") => {
+var getTestRunnerConfig = /* @__PURE__ */ __name(async (configDir = process.env.STORYBOOK_CONFIG_DIR ?? ".storybook") => {
   if (loaded) {
     return testRunnerConfig;
   }
-  testRunnerConfig = (0, import_common3.serverRequire)((0, import_path3.join)((0, import_path3.resolve)(configDir), "test-runner"));
+  testRunnerConfig = await (0, import_common3.serverRequire)((0, import_path3.join)((0, import_path3.resolve)(configDir), "test-runner"));
   loaded = true;
   return testRunnerConfig;
 }, "getTestRunnerConfig");
@@ -24486,8 +24486,8 @@ var t = __toESM(require("@babel/types"));
 var import_generator = __toESM(require("@babel/generator"));
 
 // src/util/getTagOptions.ts
-function getTagOptions() {
-  const config = getTestRunnerConfig();
+async function getTagOptions() {
+  const config = await getTestRunnerConfig();
   let tagOptions = {
     includeTags: config?.tags?.include || [
       "test"
@@ -24655,7 +24655,7 @@ function groupByTitleId(entries) {
   }, {});
 }
 __name(groupByTitleId, "groupByTitleId");
-var transformPlaywrightJson = /* @__PURE__ */ __name((index) => {
+var transformPlaywrightJson = /* @__PURE__ */ __name(async (index) => {
   let titleIdToEntries;
   if (index.v === 3) {
     const titleIdToStories = groupByTitleId(Object.values(index.stories));
@@ -24668,7 +24668,7 @@ var transformPlaywrightJson = /* @__PURE__ */ __name((index) => {
   } else {
     throw new Error(`Unsupported version ${index.v}`);
   }
-  const { includeTags, excludeTags, skipTags } = getTagOptions();
+  const { includeTags, excludeTags, skipTags } = await getTagOptions();
   const titleIdToTest = Object.entries(titleIdToEntries).reduce((acc, [titleId, entries]) => {
     const stories = entries.filter((s) => s.type !== "docs");
     if (stories.length) {
@@ -24859,7 +24859,7 @@ async function getIndexTempDir(url) {
   let tmpDir;
   try {
     const indexJson = await getIndexJson(url);
-    const titleIdToTest = transformPlaywrightJson(indexJson);
+    const titleIdToTest = await transformPlaywrightJson(indexJson);
     tmpDir = import_tempy.default.directory();
     for (const [titleId, test] of Object.entries(titleIdToTest)) {
       const tmpFile = import_path4.default.join(tmpDir, `${titleId}.test.js`);
@@ -24920,7 +24920,7 @@ var main = /* @__PURE__ */ __name(async () => {
     process.exit(0);
   }
   process.env.STORYBOOK_CONFIG_DIR = runnerOptions.configDir;
-  const testRunnerConfig2 = getTestRunnerConfig(runnerOptions.configDir) ?? {};
+  const testRunnerConfig2 = await getTestRunnerConfig(runnerOptions.configDir) ?? {};
   if (testRunnerConfig2.preVisit && testRunnerConfig2.preRender) {
     throw new Error("You cannot use both preVisit and preRender hooks in your test-runner config file. Please use preVisit instead.");
   }
@@ -24982,7 +24982,7 @@ var main = /* @__PURE__ */ __name(async () => {
     process.env.TEST_ROOT = indexTmpDir;
     process.env.TEST_MATCH = "**/*.test.js";
   }
-  const { storiesPaths, lazyCompilation, disableTelemetry, enableCrashReports } = getStorybookMetadata();
+  const { storiesPaths, lazyCompilation, disableTelemetry, enableCrashReports } = await getStorybookMetadata();
   if (!shouldRunIndexJson) {
     process.env.STORYBOOK_STORIES_PATTERN = storiesPaths;
     process.env.STORYBOOK_PREVIEW_TAGS = await extractTagsFromPreview(runnerOptions.configDir);
diff --git a/dist/test-storybook.mjs b/dist/test-storybook.mjs
index ba1000aaad46134bc837f107a472545fc0710ca6..fc784b3698cd49844bbfb1f863cda49fe03ad6a5 100755
--- a/dist/test-storybook.mjs
+++ b/dist/test-storybook.mjs
@@ -24437,10 +24437,10 @@ var getStorybookMain = /* @__PURE__ */ __name((configDir = ".storybook") => {
 }, "getStorybookMain");
 
 // src/util/getStorybookMetadata.ts
-var getStorybookMetadata = /* @__PURE__ */ __name(() => {
+var getStorybookMetadata = /* @__PURE__ */ __name(async () => {
   const workingDir = getProjectRoot();
   const configDir = process.env.STORYBOOK_CONFIG_DIR ?? ".storybook";
-  const main2 = getStorybookMain(configDir);
+  const main2 = await getStorybookMain(configDir);
   const normalizedStoriesEntries = normalizeStories(main2.stories, {
     configDir,
     workingDir
@@ -24661,7 +24661,7 @@ function groupByTitleId(entries) {
   }, {});
 }
 __name(groupByTitleId, "groupByTitleId");
-var transformPlaywrightJson = /* @__PURE__ */ __name((index) => {
+var transformPlaywrightJson = /* @__PURE__ */ __name(async (index) => {
   let titleIdToEntries;
   if (index.v === 3) {
     const titleIdToStories = groupByTitleId(Object.values(index.stories));
@@ -24674,7 +24674,7 @@ var transformPlaywrightJson = /* @__PURE__ */ __name((index) => {
   } else {
     throw new Error(`Unsupported version ${index.v}`);
   }
-  const { includeTags, excludeTags, skipTags } = getTagOptions();
+  const { includeTags, excludeTags, skipTags } = await getTagOptions();
   const titleIdToTest = Object.entries(titleIdToEntries).reduce((acc, [titleId, entries]) => {
     const stories = entries.filter((s) => s.type !== "docs");
     if (stories.length) {
@@ -24865,7 +24865,7 @@ async function getIndexTempDir(url) {
   let tmpDir;
   try {
     const indexJson = await getIndexJson(url);
-    const titleIdToTest = transformPlaywrightJson(indexJson);
+    const titleIdToTest = await transformPlaywrightJson(indexJson);
     tmpDir = import_tempy.default.directory();
     for (const [titleId, test] of Object.entries(titleIdToTest)) {
       const tmpFile = path2.join(tmpDir, `${titleId}.test.js`);
@@ -24988,7 +24988,7 @@ var main = /* @__PURE__ */ __name(async () => {
     process.env.TEST_ROOT = indexTmpDir;
     process.env.TEST_MATCH = "**/*.test.js";
   }
-  const { storiesPaths, lazyCompilation, disableTelemetry, enableCrashReports } = getStorybookMetadata();
+  const { storiesPaths, lazyCompilation, disableTelemetry, enableCrashReports } = await getStorybookMetadata();
   if (!shouldRunIndexJson) {
     process.env.STORYBOOK_STORIES_PATTERN = storiesPaths;
     process.env.STORYBOOK_PREVIEW_TAGS = await extractTagsFromPreview(runnerOptions.configDir);
diff --git a/playwright/transform.js b/playwright/transform.js
index b2e6b2f6a4bf8b97d275249db333de3ba540e3c2..040898553d5ed139395152a3dc406dfc88f3ac03 100644
--- a/playwright/transform.js
+++ b/playwright/transform.js
@@ -2,8 +2,8 @@ const { transformSync: swcTransform } = require('@swc/core');
 const { transformPlaywright } = require('../dist');
 
 module.exports = {
-  process(src, filename) {
-    const csfTest = transformPlaywright(src, filename);
+  async process(src, filename) {
+    const csfTest = await transformPlaywright(src, filename);
 
     const result = swcTransform(csfTest, {
       filename,
