diff --git a/bin/index.cjs b/bin/index.cjs
index d0395f4f3f9e415065d539f1dc7cf14f1eb2c824..ce13973e4eb9c3858483445373249c20f2a7261d 100755
--- a/bin/index.cjs
+++ b/bin/index.cjs
@@ -1,8 +1,8 @@
 #!/usr/bin/env node
 
 const majorNodeVersion = parseInt(process.versions.node, 10);
-if (majorNodeVersion < 20) {
-  console.error('To run Storybook you need to have Node.js 20 or higher');
+if (majorNodeVersion < 18) {
+  console.error('To run Storybook you need to have Node.js 18 or higher');
   process.exit(1);
 }
 
diff --git a/dist/builder-manager/index.cjs b/dist/builder-manager/index.cjs
index d25c8bd1565cb9746c9ca42be8a3766287dfa3df..9054e933e1c958dcc297b64284ea1b74f5a616a1 100644
--- a/dist/builder-manager/index.cjs
+++ b/dist/builder-manager/index.cjs
@@ -2008,17 +2008,20 @@ var Vi = /^\/($|\?)/, D, I, he = /* @__PURE__ */ o(async (e) => {
     jsxImportSource: "react",
     tsconfig: r,
     legalComments: "external",
-    plugins: [oe(Ht.globalsModuleInfoMap), (0, Jt.pnpPlugin)()],
+    plugins: [oe(Ht.globalsModuleInfoMap), require('node-stdlib-browser/helpers/esbuild/plugin')(require('node-stdlib-browser')), (0, Jt.pnpPlugin)()],
     banner: {
       js: "try{"
     },
     footer: {
       js: '}catch(e){ console.error("[Storybook] One of your manager-entries failed: " + import.meta.url, e); }'
     },
+    inject: [require.resolve('node-stdlib-browser/helpers/esbuild/shim')],
     define: {
+      process: "process",
       "process.env": JSON.stringify(a),
       ...(0, Bt.stringifyProcessEnvs)(a),
       global: "window",
+      Buffer: "Buffer",
       module: "{}"
     }
   };
diff --git a/dist/builder-manager/index.js b/dist/builder-manager/index.js
index abe09a07cb1ee3b3bac4ca0480823c720b358235..399eaa2e99d7cf11358adc492b8edb688af223d4 100644
--- a/dist/builder-manager/index.js
+++ b/dist/builder-manager/index.js
@@ -2023,17 +2023,20 @@ var pr = /^\/($|\?)/, L, C, _t = /* @__PURE__ */ o(async (e) => {
     jsxImportSource: "react",
     tsconfig: r,
     legalComments: "external",
-    plugins: [Z(cr), (0, Ct.pnpPlugin)()],
+    plugins: [Z(cr), require('node-stdlib-browser/helpers/esbuild/plugin')(require('node-stdlib-browser')), (0, Ct.pnpPlugin)()],
     banner: {
       js: "try{"
     },
     footer: {
       js: '}catch(e){ console.error("[Storybook] One of your manager-entries failed: " + import.meta.url, e); }'
     },
+    inject: [require.resolve('node-stdlib-browser/helpers/esbuild/shim')],
     define: {
+      process: "process",
       "process.env": JSON.stringify(a),
       ...lr(a),
       global: "window",
+      Buffer: "Buffer",
       module: "{}"
     }
   };
diff --git a/dist/common/index.cjs b/dist/common/index.cjs
index 85790ccf1d5cb67bb844e5953a9a0c21ca1e5bf1..7e9c731be33ccdba9df262ed9049c7a6e7157f55 100644
--- a/dist/common/index.cjs
+++ b/dist/common/index.cjs
@@ -18738,14 +18738,14 @@ s(la, "getInterpretedFileWithExt");
 
 // src/common/utils/interpret-require.ts
 var SE = !1;
-function sn(t) {
+async function sn(t) {
   let A = !!require("module")._extensions[".ts"];
   if (SE === !1 && !A) {
     let { register: i } = require("esbuild-register/dist/node");
     SE = !0, i({
       target: `node${process.version.slice(1)}`,
       format: "cjs",
-      hookIgnoreNodeModules: !0,
+      hookIgnoreNodeModules: !1,
       // Some frameworks, like Stylus, rely on the 'name' property of classes or functions
       // https://github.com/storybookjs/storybook/issues/19049
       keepNames: !0,
@@ -18757,7 +18757,9 @@ function sn(t) {
     }`
     });
   }
-  let e = require(t);
+  const { isAbsolute } = require('node:path');
+  const { pathToFileURL } = require('node:url');
+  let e = await import(isAbsolute(t) ? pathToFileURL(t).href : t);
   return typeof e == "object" && e !== null && typeof e.default < "u" ? e.default : e;
 }
 s(sn, "interopRequireDefault");
@@ -23382,10 +23384,10 @@ async function es(t, A) {
 s(es, "validateConfigurationFiles");
 
 // src/common/utils/load-custom-presets.ts
-function La({ configDir: t }) {
+async function La({ configDir: t }) {
   es(t);
-  let A = Yr((0, Kn.resolve)(t, "presets"));
-  if (Yr((0, Kn.resolve)(t, "main"))) {
+  let A = await Yr((0, Kn.resolve)(t, "presets"));
+  if (await Yr((0, Kn.resolve)(t, "main"))) {
     let r = Pr((0, Kn.resolve)(t, "main"));
     if (r)
       return [r];
@@ -23628,7 +23630,7 @@ s(Gu, "getPresets");
 async function sN(t) {
   let { corePresets: A = [], overridePresets: e = [], ...r } = t, i = [
     ...A,
-    ...La(t),
+    ...await La(t),
     ...e
   ], n = Yu(i);
   return n.length < i.length && Xr.logger.warn(
diff --git a/dist/common/index.js b/dist/common/index.js
index 2cbde37aa2bd4c2b1884fe606a77015606051220..2724124f13adcf685b6d714e397499963ae03255 100644
--- a/dist/common/index.js
+++ b/dist/common/index.js
@@ -18669,14 +18669,14 @@ s(Bl, "getInterpretedFileWithExt");
 
 // src/common/utils/interpret-require.ts
 var Ql = !1;
-function dg(t) {
+async function dg(t) {
   let A = !!v("module")._extensions[".ts"];
   if (Ql === !1 && !A) {
     let { register: i } = v("esbuild-register/dist/node");
     Ql = !0, i({
       target: `node${process.version.slice(1)}`,
       format: "cjs",
-      hookIgnoreNodeModules: !0,
+      hookIgnoreNodeModules: !1,
       // Some frameworks, like Stylus, rely on the 'name' property of classes or functions
       // https://github.com/storybookjs/storybook/issues/19049
       keepNames: !0,
@@ -18688,7 +18688,9 @@ function dg(t) {
     }`
     });
   }
-  let e = v(t);
+  const { isAbsolute } = require('node:path');
+  const { pathToFileURL } = require('module:url');
+  let e = await import(isAbsolute(t) ? pathToFileURL(t).href : t);
   return typeof e == "object" && e !== null && typeof e.default < "u" ? e.default : e;
 }
 s(dg, "interopRequireDefault");
@@ -23321,10 +23323,10 @@ async function qs(t, A) {
 s(qs, "validateConfigurationFiles");
 
 // src/common/utils/load-custom-presets.ts
-function BE({ configDir: t }) {
+async function BE({ configDir: t }) {
   qs(t);
-  let A = Ii(Gg(t, "presets"));
-  if (Ii(Gg(t, "main"))) {
+  let A = await Ii(Gg(t, "presets"));
+  if (await Ii(Gg(t, "main"))) {
     let r = hi(Gg(t, "main"));
     if (r)
       return [r];
@@ -23567,7 +23569,7 @@ s(jk, "getPresets");
 async function _1(t) {
   let { corePresets: A = [], overridePresets: e = [], ...r } = t, i = [
     ...A,
-    ...BE(t),
+    ...await BE(t),
     ...e
   ], n = Gk(i);
   return n.length < i.length && bi.warn(
diff --git a/dist/core-server/index.cjs b/dist/core-server/index.cjs
index c815edd42d9023f3388952285578ad3dcb38e0e5..6e760cdaef2c19c295ebdea887764412d08fb624 100644
--- a/dist/core-server/index.cjs
+++ b/dist/core-server/index.cjs
@@ -35791,7 +35791,7 @@ async function ad(e) {
   await (0, F2.rm)(e.outputDir, { recursive: !0, force: !0 }).catch(() => {
   }), await (0, Ou.mkdir)(e.outputDir, { recursive: !0 });
   let t = await (0, vr.loadMainConfig)(e), { framework: r } = t, i = [], n = typeof r == "string" ? r : r?.name;
-  n ? i.push((0, or.join)(n, "preset")) : e.ignorePreview || oi.logger.warn(`you have not specified a framework in your ${e.configDir}/main.\
+  n ? i.push(require.resolve((0, or.join)(n, "preset"))) : e.ignorePreview || oi.logger.warn(`you have not specified a framework in your ${e.configDir}/main.\
 js`), oi.logger.info("=> Loading presets");
   let o = await (0, vr.loadAllPresets)({
     corePresets: [
@@ -37970,7 +37970,7 @@ async function Lg(e) {
   e.smokeTest && (p = c), e.port = a, e.versionCheck = u, e.configType = "DEVELOPMENT", e.configDir = o, e.cacheKey = l, e.outputDir = p, e.
   serverChannelUrl = d_(a, e);
   let h = await (0, rt.loadMainConfig)(e), { framework: f } = h, d = [], m = typeof f == "string" ? f : f?.name;
-  e.ignorePreview || (0, rt.validateFrameworkName)(m), m && d.push((0, Ui.join)(m, "preset")), m = m || "custom";
+  e.ignorePreview || (0, rt.validateFrameworkName)(m), m && d.push(require.resolve((0, Ui.join)(m, "preset"))), m = m || "custom";
   let g = rt.JsPackageManagerFactory.getPackageManager({
     configDir: e.configDir
   });
@@ -38075,7 +38075,7 @@ async function _l(e) {
   let t = (0, vs.resolve)(e.configDir), r = (0, TT.oneWayHash)((0, vs.relative)((0, Fr.getProjectRoot)(), t));
   e.configType = "DEVELOPMENT", e.configDir = t, e.cacheKey = r;
   let i = await (0, Fr.loadMainConfig)(e), { framework: n } = i, o = [], a = typeof n == "string" ? n : n?.name;
-  e.ignorePreview || (0, Fr.validateFrameworkName)(a), a && o.push((0, vs.join)(a, "preset")), a = a || "custom";
+  e.ignorePreview || (0, Fr.validateFrameworkName)(a), a && o.push(require.resolve((0, vs.join)(a, "preset"))), a = a || "custom";
   let u = await (0, Fr.loadAllPresets)({
     corePresets: o,
     overridePresets: [
diff --git a/dist/core-server/index.js b/dist/core-server/index.js
index 1b9e9121a37bc0e6e720322d1c59513e16e352b2..2bdcb7dd4c37b02a642a4ae16bd9be5d87397db7 100644
--- a/dist/core-server/index.js
+++ b/dist/core-server/index.js
@@ -35813,7 +35813,7 @@ async function OC(e) {
   await vj(e.outputDir, { recursive: !0, force: !0 }).catch(() => {
   }), await bj(e.outputDir, { recursive: !0 });
   let t = await Aj(e), { framework: r } = t, i = [], n = typeof r == "string" ? r : r?.name;
-  n ? i.push(lu(n, "preset")) : e.ignorePreview || vi.warn(`you have not specified a framework in your ${e.configDir}/main.js`), vi.info("=>\
+  n ? i.push(require.resolve(lu(n, "preset"))) : e.ignorePreview || vi.warn(`you have not specified a framework in your ${e.configDir}/main.js`), vi.info("=>\
  Loading presets");
   let o = await BC({
     corePresets: [
@@ -38030,7 +38030,7 @@ async function bk(e) {
   e.smokeTest && (p = c), e.port = a, e.versionCheck = u, e.configType = "DEVELOPMENT", e.configDir = o, e.cacheKey = l, e.outputDir = p, e.
   serverChannelUrl = l3(a, e);
   let h = await fX(e), { framework: f } = h, d = [], m = typeof f == "string" ? f : f?.name;
-  e.ignorePreview || DX(m), m && d.push(uX(m, "preset")), m = m || "custom";
+  e.ignorePreview || DX(m), m && d.push(require.resolve(uX(m, "preset"))), m = m || "custom";
   let g = cX.getPackageManager({
     configDir: e.configDir
   });
@@ -38146,7 +38146,7 @@ async function eg(e) {
   let t = SX(e.configDir), r = BX(AX(FX(), t));
   e.configType = "DEVELOPMENT", e.configDir = t, e.cacheKey = r;
   let i = await _X(e), { framework: n } = i, o = [], a = typeof n == "string" ? n : n?.name;
-  e.ignorePreview || TX(a), a && o.push(wX(a, "preset")), a = a || "custom";
+  e.ignorePreview || TX(a), a && o.push(require.resolve(wX(a, "preset"))), a = a || "custom";
   let u = await vk({
     corePresets: o,
     overridePresets: [
